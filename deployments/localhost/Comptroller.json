{
  "address": "0xb65b8F3b08DF73350c11EAA76DdED3cd506A0D32",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum ComptrollerV9Storage.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPausedMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "ActionProtocolPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedVAIVaultVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "NewAccessControl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldComptrollerLens",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newComptrollerLens",
          "type": "address"
        }
      ],
      "name": "NewComptrollerLens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLiquidatorContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLiquidatorContract",
          "type": "address"
        }
      ],
      "name": "NewLiquidatorContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "NewTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        }
      ],
      "name": "NewTreasuryGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTreasuryPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "NewTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "oldVAIController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "newVAIController",
          "type": "address"
        }
      ],
      "name": "NewVAIController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVAIMintRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "NewVAIMintRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseInterval_",
          "type": "uint256"
        }
      ],
      "name": "NewVAIVaultInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVenusVAIVaultRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVenusVAIVaultRate",
          "type": "uint256"
        }
      ],
      "name": "NewVenusVAIVaultRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VenusGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "VenusSpeedUpdated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantXVS",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "_setAccessControl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "internalType": "enum ComptrollerV9Storage.Action[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "_setActionsPaused",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "comptrollerLens_",
          "type": "address"
        }
      ],
      "name": "_setComptrollerLens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidatorContract_",
          "type": "address"
        }
      ],
      "name": "_setLiquidatorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setProtocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "_setTreasuryData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "vaiController_",
          "type": "address"
        }
      ],
      "name": "_setVAIController",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "_setVAIMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReleaseAmount_",
          "type": "uint256"
        }
      ],
      "name": "_setVAIVaultInfo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "venusSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setVenusSpeed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "venusVAIVaultRate_",
          "type": "uint256"
        }
      ],
      "name": "_setVenusVAIVaultRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "enum ComptrollerV9Storage.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "actionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "collateral",
          "type": "bool"
        }
      ],
      "name": "claimVenus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "claimVenus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimVenus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimVenus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimVenusAsCollateral",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerLens",
      "outputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract VToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract VToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getXVSAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getXVSVTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateVAICalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVenus",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minReleaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedVAIs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "releaseStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "releaseToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "repayVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMintedVAIOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusVAIVaultRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb86547d1d4bee442918750daa37be7a436829d570ec1582df90813e020c4ed2e",
  "receipt": {
    "to": null,
    "from": "0xAA2867301B5cd587Ce3Fb0effC571e87B273E7bB",
    "contractAddress": "0xb65b8F3b08DF73350c11EAA76DdED3cd506A0D32",
    "transactionIndex": 0,
    "gasUsed": "5340696",
    "logsBloom": "0x
    "blockHash": "0x2fb011f18592849ea45b977c8db567688fa861f8cb5fac97ff008649882b6676",
    "transactionHash": "0xb86547d1d4bee442918750daa37be7a436829d570ec1582df90813e020c4ed2e",
    "logs": [],
    "blockNumber": 24437000,
    "cumulativeGasUsed": "5340696",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "424a2eb7ba7544c90693bf2d5e9578fa",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ComptrollerV9Storage.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPausedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ActionProtocolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedVAIVaultVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"NewAccessControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldComptrollerLens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newComptrollerLens\",\"type\":\"address\"}],\"name\":\"NewComptrollerLens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidatorContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidatorContract\",\"type\":\"address\"}],\"name\":\"NewLiquidatorContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"NewTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"}],\"name\":\"NewTreasuryGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTreasuryPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"oldVAIController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"newVAIController\",\"type\":\"address\"}],\"name\":\"NewVAIController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVAIMintRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"NewVAIMintRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseInterval_\",\"type\":\"uint256\"}],\"name\":\"NewVAIVaultInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVenusVAIVaultRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVenusVAIVaultRate\",\"type\":\"uint256\"}],\"name\":\"NewVenusVAIVaultRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VenusGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"VenusSpeedUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantXVS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"_setAccessControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"enum ComptrollerV9Storage.Action[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"_setActionsPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptrollerLens_\",\"type\":\"address\"}],\"name\":\"_setComptrollerLens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidatorContract_\",\"type\":\"address\"}],\"name\":\"_setLiquidatorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setProtocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"_setTreasuryData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"vaiController_\",\"type\":\"address\"}],\"name\":\"_setVAIController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"_setVAIMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReleaseAmount_\",\"type\":\"uint256\"}],\"name\":\"_setVAIVaultInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"venusSpeed\",\"type\":\"uint256\"}],\"name\":\"_setVenusSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"venusVAIVaultRate_\",\"type\":\"uint256\"}],\"name\":\"_setVenusVAIVaultRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"enum ComptrollerV9Storage.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"actionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collateral\",\"type\":\"bool\"}],\"name\":\"claimVenus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"claimVenus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimVenus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimVenus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimVenusAsCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerLens\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getXVSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getXVSVTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateVAICalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVenus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedVAIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repayVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMintedVAIOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusVAIVaultRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"methods\":{\"_grantXVS(address,uint256)\":{\"details\":\"Note: If there is not enough XVS, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of XVS to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer XVS to\"}},\"_setAccessControl(address)\":{\"details\":\"Admin function to set the access control address\",\"params\":{\"newAccessControlAddress\":\"New address for the access control\"},\"return\":\"uint 0=success, otherwise will revert\"},\"_setActionsPaused(address[],uint8[],bool)\":{\"params\":{\"actions\":\"List of action ids to pause/unpause\",\"markets\":\"Markets to pause/unpause the actions on\",\"paused\":\"The new paused state (true=paused, false=unpaused)\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"return\":\"uint 0=success, otherwise will revert\"},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Restricted function to set per-market collateralFactor\",\"params\":{\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\",\"vToken\":\"The market to set the factor on\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setComptrollerLens(address)\":{\"details\":\"Set ComptrollerLens contract address\"},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Access is controled by ACM. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\",\"vTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin function to set the supply caps. A supply cap of 0 corresponds to Minting NotAllowed.\",\"params\":{\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed.\",\"vTokens\":\"The addresses of the markets (tokens) to change the supply caps for\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setVAIController(address)\":{\"details\":\"Admin function to set a new VAI controller\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"params\":{\"minReleaseAmount_\":\"The minimum release amount to VAI Vault\",\"releaseStartBlock_\":\"The start block of release to VAI Vault\",\"vault_\":\"The address of the VAI Vault\"}},\"_setVenusSpeed(address,uint256)\":{\"params\":{\"vToken\":\"The market whose XVS speed to update\",\"venusSpeed\":\"New XVS speed for market\"}},\"_setVenusVAIVaultRate(uint256)\":{\"params\":{\"venusVAIVaultRate_\":\"The amount of XVS wei per block to distribute to VAI Vault\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"vToken\":\"The address of the market (token) to list\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"actionPaused(address,uint8)\":{\"params\":{\"action\":\"Action id\",\"market\":\"vToken address\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"vToken\":\"The market to verify the borrow against\"},\"return\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"vToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"vToken\":\"The vToken to check\"},\"return\":\"True if the account is in the asset, otherwise false.\"},\"claimVenus(address)\":{\"params\":{\"holder\":\"The address to claim XVS for\"}},\"claimVenus(address,address[])\":{\"params\":{\"holder\":\"The address to claim XVS for\",\"vTokens\":\"The list of markets to claim XVS in\"}},\"claimVenus(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim XVS earned by borrowing\",\"holders\":\"The addresses to claim XVS for\",\"suppliers\":\"Whether or not to claim XVS earned by supplying\",\"vTokens\":\"The list of markets to claim XVS in\"}},\"claimVenus(address[],address[],bool,bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim XVS earned by borrowing\",\"collateral\":\"Whether or not to use XVS earned as collateral, only takes effect when the holder has a shortfall\",\"holders\":\"The addresses to claim XVS for\",\"suppliers\":\"Whether or not to claim XVS earned by supplying\",\"vTokens\":\"The list of markets to claim XVS in\"}},\"claimVenusAsCollateral(address)\":{\"params\":{\"holder\":\"The address to claim XVS for\"}},\"enterMarkets(address[])\":{\"params\":{\"vTokens\":\"The list of addresses of the vToken markets to be enabled\"},\"return\":\"Success indicator for whether each corresponding market was entered\"},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"vTokenAddress\":\"The address of the asset to be removed\"},\"return\":\"Whether or not the account successfully exited the market\"},\"getAccountLiquidity(address)\":{\"return\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)\"},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"return\":\"The list of market addresses\"},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"return\":\"A dynamic list with the assets the account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\",\"vTokenModify\":\"The market to hypothetically redeem/borrow in\"},\"return\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)\"},\"getXVSAddress()\":{\"return\":\"The address of XVS\"},\"getXVSVTokenAddress()\":{\"return\":\"The address of XVS vToken\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The amount of collateral token that will be seized\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in vToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\",\"vTokenBorrowed\":\"The address of the borrowed vToken\",\"vTokenCollateral\":\"The address of the collateral vToken\"},\"return\":\"(errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\"},\"liquidateVAICalculateSeizeTokens(address,uint256)\":{\"details\":\"Used in liquidation (called in vToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\",\"vTokenCollateral\":\"The address of the collateral vToken\"},\"return\":\"(errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\"},\"mintAllowed(address,address,uint256)\":{\"params\":{\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\",\"vToken\":\"The market to verify the mint against\"},\"return\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\",\"vToken\":\"Asset being minted\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"redeemTokens\":\"The number of vTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\",\"vToken\":\"The market to verify the redeem against\"},\"return\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\",\"vToken\":\"Asset being redeemed\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which borrowed the asset\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\",\"vToken\":\"The market to verify the repay against\"},\"return\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"payer\":\"The address repaying the borrow\",\"vToken\":\"Asset being repaid\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"setMintedVAIOf(address,uint256)\":{\"params\":{\"amount\":\"The amount of VAI to set to the account\",\"owner\":\"The address of the account to set\"},\"return\":\"The number of minted VAI by `owner`\"},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of vTokens to transfer\",\"vToken\":\"The market to verify the transfer against\"},\"return\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of vTokens to transfer\",\"vToken\":\"Asset being transferred\"}}},\"title\":\"Venus's Comptroller Contract\"},\"userdoc\":{\"methods\":{\"_grantXVS(address,uint256)\":{\"notice\":\"Transfer XVS to the recipient\"},\"_setAccessControl(address)\":{\"notice\":\"Sets the address of the access control of this contract\"},\"_setActionsPaused(address[],uint8[],bool)\":{\"notice\":\"Pause/unpause certain actions\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given vToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given vToken markets. Supply that brings total Supply to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setProtocolPaused(bool)\":{\"notice\":\"Set whole protocol pause/unpause state\"},\"_setVAIController(address)\":{\"notice\":\"Sets a new VAI controller\"},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"notice\":\"Set the VAI Vault infos\"},\"_setVenusSpeed(address,uint256)\":{\"notice\":\"Set XVS speed for a single market\"},\"_setVenusVAIVaultRate(uint256)\":{\"notice\":\"Set the amount of XVS distributed per block to VAI Vault\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"actionPaused(address,uint8)\":{\"notice\":\"Checks if a certain action is paused on a market\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimVenus(address)\":{\"notice\":\"Claim all the xvs accrued by holder in all markets and VAI\"},\"claimVenus(address,address[])\":{\"notice\":\"Claim all the xvs accrued by holder in the specified markets\"},\"claimVenus(address[],address[],bool,bool)\":{\"notice\":\"Claim all xvs accrued by the holders\"},\"claimVenus(address[],address[],bool,bool,bool)\":{\"notice\":\"Claim all xvs accrued by the holders\"},\"claimVenusAsCollateral(address)\":{\"notice\":\"Claim all the xvs accrued by holder in all markets, a shorthand for `claimVenus` with collateral set to `true`\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"getXVSAddress()\":{\"notice\":\"Return the address of the XVS token\"},\"getXVSVTokenAddress()\":{\"notice\":\"Return the address of the XVS vToken\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidateVAICalculateSeizeTokens(address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"releaseToVault()\":{\"notice\":\"Transfer XVS to VAI Vault\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"setMintedVAIOf(address,uint256)\":{\"notice\":\"Set the minted VAI amount of the `owner`\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Careful Math\\r\\n  * @author Venus\\r\\n  * @notice Derived from OpenZeppelin's SafeMath library\\r\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\r\\n  */\\r\\ncontract CarefulMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Possible error codes that we can return\\r\\n     */\\r\\n    enum MathError {\\r\\n        NO_ERROR,\\r\\n        DIVISION_BY_ZERO,\\r\\n        INTEGER_OVERFLOW,\\r\\n        INTEGER_UNDERFLOW\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (a == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n\\r\\n        if (c / a != b) {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        } else {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b == 0) {\\r\\n            return (MathError.DIVISION_BY_ZERO, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b <= a) {\\r\\n            return (MathError.NO_ERROR, a - b);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        uint c = a + b;\\r\\n\\r\\n        if (c >= a) {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev add a and b and then subtract c\\r\\n    */\\r\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\r\\n        (MathError err0, uint sum) = addUInt(a, b);\\r\\n\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, 0);\\r\\n        }\\r\\n\\r\\n        return subUInt(sum, c);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x855f65e2bd271e114555e71a10c3b3276ab70643c0c96a452b3493423de474a4\"},\"contracts/Comptroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\nimport \\\"./Governance/XVS.sol\\\";\\r\\nimport \\\"./VAI/VAI.sol\\\";\\r\\nimport \\\"./ComptrollerLensInterface.sol\\\";\\r\\nimport \\\"./IAccessControlManager.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Venus's Comptroller Contract\\r\\n * @author Venus\\r\\n */\\r\\ncontract Comptroller is ComptrollerV9Storage, ComptrollerInterfaceG2, ComptrollerErrorReporter, ExponentialNoError {\\r\\n    /// @notice Emitted when an admin supports a market\\r\\n    event MarketListed(VToken vToken);\\r\\n\\r\\n    /// @notice Emitted when an account enters a market\\r\\n    event MarketEntered(VToken vToken, address account);\\r\\n\\r\\n    /// @notice Emitted when an account exits a market\\r\\n    event MarketExited(VToken vToken, address account);\\r\\n\\r\\n    /// @notice Emitted when close factor is changed by admin\\r\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when a collateral factor is changed by admin\\r\\n    event NewCollateralFactor(VToken vToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when liquidation incentive is changed by admin\\r\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\r\\n\\r\\n    /// @notice Emitted when price oracle is changed\\r\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\r\\n\\r\\n    /// @notice Emitted when VAI Vault info is changed\\r\\n    event NewVAIVaultInfo(address vault_, uint releaseStartBlock_, uint releaseInterval_);\\r\\n\\r\\n    /// @notice Emitted when pause guardian is changed\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n\\r\\n    /// @notice Emitted when an action is paused on a market\\r\\n    event ActionPausedMarket(VToken indexed vToken, Action indexed action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when Venus VAI Vault rate is changed\\r\\n    event NewVenusVAIVaultRate(uint oldVenusVAIVaultRate, uint newVenusVAIVaultRate);\\r\\n\\r\\n    /// @notice Emitted when a new Venus speed is calculated for a market\\r\\n    event VenusSpeedUpdated(VToken indexed vToken, uint newSpeed);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to a supplier\\r\\n    event DistributedSupplierVenus(VToken indexed vToken, address indexed supplier, uint venusDelta, uint venusSupplyIndex);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to a borrower\\r\\n    event DistributedBorrowerVenus(VToken indexed vToken, address indexed borrower, uint venusDelta, uint venusBorrowIndex);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to VAI Vault\\r\\n    event DistributedVAIVaultVenus(uint amount);\\r\\n\\r\\n    /// @notice Emitted when VAIController is changed\\r\\n    event NewVAIController(VAIControllerInterface oldVAIController, VAIControllerInterface newVAIController);\\r\\n\\r\\n    /// @notice Emitted when VAI mint rate is changed by admin\\r\\n    event NewVAIMintRate(uint oldVAIMintRate, uint newVAIMintRate);\\r\\n\\r\\n    /// @notice Emitted when protocol state is changed by admin\\r\\n    event ActionProtocolPaused(bool state);\\r\\n\\r\\n    /// @notice Emitted when borrow cap for a vToken is changed\\r\\n    event NewBorrowCap(VToken indexed vToken, uint newBorrowCap);\\r\\n\\r\\n    /// @notice Emitted when treasury guardian is changed\\r\\n    event NewTreasuryGuardian(address oldTreasuryGuardian, address newTreasuryGuardian);\\r\\n\\r\\n    /// @notice Emitted when treasury address is changed\\r\\n    event NewTreasuryAddress(address oldTreasuryAddress, address newTreasuryAddress);\\r\\n\\r\\n    /// @notice Emitted when treasury percent is changed\\r\\n    event NewTreasuryPercent(uint oldTreasuryPercent, uint newTreasuryPercent);\\r\\n\\r\\n    // @notice Emitted when liquidator adress is changed\\r\\n    event NewLiquidatorContract(address oldLiquidatorContract, address newLiquidatorContract);\\r\\n\\r\\n    /// @notice Emitted when Venus is granted by admin\\r\\n    event VenusGranted(address recipient, uint amount);\\r\\n\\r\\n    /// @notice Emitted whe ComptrollerLens address is changed\\r\\n    event NewComptrollerLens(address oldComptrollerLens, address newComptrollerLens);\\r\\n\\r\\n    /// @notice Emitted when supply cap for a vToken is changed\\r\\n    event NewSupplyCap(VToken indexed vToken, uint newSupplyCap);\\r\\n\\r\\n    /// @notice Emitted when access control address is changed by admin\\r\\n    event NewAccessControl(address oldAccessControlAddress, address newAccessControlAddress);\\r\\n\\r\\n    /// @notice The initial Venus index for a market\\r\\n    uint224 public constant venusInitialIndex = 1e36;\\r\\n\\r\\n    // closeFactorMantissa must be strictly greater than this value\\r\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\r\\n\\r\\n    // closeFactorMantissa must not exceed this value\\r\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // No collateralFactorMantissa may exceed this value\\r\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    constructor() public {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Reverts if the protocol is paused\\r\\n    function checkProtocolPauseState() private view {\\r\\n        require(!protocolPaused, \\\"protocol is paused\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Reverts if a certain action is paused on a market\\r\\n    function checkActionPauseState(address market, Action action) private view {\\r\\n        require(!actionPaused(market, action), \\\"action is paused\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Reverts if the caller is not admin\\r\\n    function ensureAdmin() private view {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Checks the passed address is nonzero\\r\\n    function ensureNonzeroAddress(address someone) private pure {\\r\\n        require(someone != address(0), \\\"can't be zero address\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Reverts if the market is not listed\\r\\n    function ensureListed(Market storage market) private view {\\r\\n        require(market.isListed, \\\"market not listed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Reverts if the caller is neither admin nor the passed address\\r\\n    function ensureAdminOr(address privilegedAddress) private view {\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == privilegedAddress,\\r\\n            \\\"access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function ensureAllowed(string memory functionSig) private view {\\r\\n        require(\\r\\n            IAccessControlManager(accessControl).isAllowedToCall(msg.sender, functionSig),\\r\\n            \\\"access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the assets an account has entered\\r\\n     * @param account The address of the account to pull assets for\\r\\n     * @return A dynamic list with the assets the account has entered\\r\\n     */\\r\\n    function getAssetsIn(address account) external view returns (VToken[] memory) {\\r\\n        return accountAssets[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given account is entered in the given asset\\r\\n     * @param account The address of the account to check\\r\\n     * @param vToken The vToken to check\\r\\n     * @return True if the account is in the asset, otherwise false.\\r\\n     */\\r\\n    function checkMembership(address account, VToken vToken) external view returns (bool) {\\r\\n        return markets[address(vToken)].accountMembership[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add assets to be included in account liquidity calculation\\r\\n     * @param vTokens The list of addresses of the vToken markets to be enabled\\r\\n     * @return Success indicator for whether each corresponding market was entered\\r\\n     */\\r\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory) {\\r\\n        uint len = vTokens.length;\\r\\n\\r\\n        uint[] memory results = new uint[](len);\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            results[i] = uint(addToMarketInternal(VToken(vTokens[i]), msg.sender));\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\r\\n     * @param vToken The market to enter\\r\\n     * @param borrower The address of the account to modify\\r\\n     * @return Success indicator for whether the market was entered\\r\\n     */\\r\\n    function addToMarketInternal(VToken vToken, address borrower) internal returns (Error) {\\r\\n        checkActionPauseState(address(vToken), Action.ENTER_MARKET);\\r\\n\\r\\n        Market storage marketToJoin = markets[address(vToken)];\\r\\n        ensureListed(marketToJoin);\\r\\n\\r\\n        if (marketToJoin.accountMembership[borrower]) {\\r\\n            // already joined\\r\\n            return Error.NO_ERROR;\\r\\n        }\\r\\n\\r\\n        // survived the gauntlet, add to list\\r\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\r\\n        //  this avoids having to iterate through the list for the most common use cases\\r\\n        //  that is, only when we need to perform liquidity checks\\r\\n        //  and not whenever we want to check if an account is in a particular market\\r\\n        marketToJoin.accountMembership[borrower] = true;\\r\\n        accountAssets[borrower].push(vToken);\\r\\n\\r\\n        emit MarketEntered(vToken, borrower);\\r\\n\\r\\n        return Error.NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes asset from sender's account liquidity calculation\\r\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\r\\n     *  or be providing necessary collateral for an outstanding borrow.\\r\\n     * @param vTokenAddress The address of the asset to be removed\\r\\n     * @return Whether or not the account successfully exited the market\\r\\n     */\\r\\n    function exitMarket(address vTokenAddress) external returns (uint) {\\r\\n        checkActionPauseState(vTokenAddress, Action.EXIT_MARKET);\\r\\n\\r\\n        VToken vToken = VToken(vTokenAddress);\\r\\n        /* Get sender tokensHeld and amountOwed underlying from the vToken */\\r\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = vToken.getAccountSnapshot(msg.sender);\\r\\n        require(oErr == 0, \\\"getAccountSnapshot failed\\\"); // semi-opaque error code\\r\\n\\r\\n        /* Fail if the sender has a borrow balance */\\r\\n        if (amountOwed != 0) {\\r\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\r\\n        }\\r\\n\\r\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\r\\n        uint allowed = redeemAllowedInternal(vTokenAddress, msg.sender, tokensHeld);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        Market storage marketToExit = markets[address(vToken)];\\r\\n\\r\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\r\\n        if (!marketToExit.accountMembership[msg.sender]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Set vToken account membership to false */\\r\\n        delete marketToExit.accountMembership[msg.sender];\\r\\n\\r\\n        /* Delete vToken from the account\\u2019s list of assets */\\r\\n        // In order to delete vToken, copy last item in list to location of item to be removed, reduce length by 1\\r\\n        VToken[] storage userAssetList = accountAssets[msg.sender];\\r\\n        uint len = userAssetList.length;\\r\\n        uint i;\\r\\n        for (; i < len; i++) {\\r\\n            if (userAssetList[i] == vToken) {\\r\\n                userAssetList[i] = userAssetList[len - 1];\\r\\n                userAssetList.length--;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(i < len);\\r\\n\\r\\n        emit MarketExited(vToken, msg.sender);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\r\\n     * @param vToken The market to verify the mint against\\r\\n     * @param minter The account which would get the minted tokens\\r\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\r\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vToken, Action.MINT);\\r\\n\\r\\n        // Shh - currently unused\\r\\n        mintAmount;\\r\\n\\r\\n        ensureListed(markets[vToken]);\\r\\n\\r\\n        uint256 supplyCap = supplyCaps[vToken];\\r\\n\\r\\n        // Supply cap of 0 corresponds to Minting notAllowed\\r\\n        require(supplyCap != 0, \\\"market supply cap is 0\\\");\\r\\n\\r\\n        uint256 vTokenSupply = VToken(vToken).totalSupply();\\r\\n        Exp memory exchangeRate = Exp({ mantissa: VToken(vToken).exchangeRateStored() });\\r\\n        uint256 nextTotalSupply = mul_ScalarTruncateAddUInt(exchangeRate, vTokenSupply, mintAmount);\\r\\n        require(nextTotalSupply <= supplyCap, \\\"market supply cap reached\\\");\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, minter);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being minted\\r\\n     * @param minter The address minting the tokens\\r\\n     * @param actualMintAmount The amount of the underlying asset being minted\\r\\n     * @param mintTokens The number of tokens being minted\\r\\n     */\\r\\n    function mintVerify(address vToken, address minter, uint actualMintAmount, uint mintTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        minter;\\r\\n        actualMintAmount;\\r\\n        mintTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\r\\n     * @param vToken The market to verify the redeem against\\r\\n     * @param redeemer The account which would redeem the tokens\\r\\n     * @param redeemTokens The number of vTokens to exchange for the underlying asset in the market\\r\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint) {\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vToken, Action.REDEEM);\\r\\n\\r\\n        uint allowed = redeemAllowedInternal(vToken, redeemer, redeemTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, redeemer);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function redeemAllowedInternal(address vToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\r\\n        ensureListed(markets[vToken]);\\r\\n\\r\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\r\\n        if (!markets[vToken].accountMembership[redeemer]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, VToken(vToken), redeemTokens, 0);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall != 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being redeemed\\r\\n     * @param redeemer The address redeeming the tokens\\r\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\r\\n     * @param redeemTokens The number of tokens being redeemed\\r\\n     */\\r\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        redeemer;\\r\\n\\r\\n        // Require tokens is zero or amount is also zero\\r\\n        require(redeemTokens != 0 || redeemAmount == 0, \\\"redeemTokens zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param vToken The market to verify the borrow against\\r\\n     * @param borrower The account which would borrow the asset\\r\\n     * @param borrowAmount The amount of underlying the account would borrow\\r\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vToken, Action.BORROW);\\r\\n\\r\\n        ensureListed(markets[vToken]);\\r\\n\\r\\n        if (!markets[vToken].accountMembership[borrower]) {\\r\\n            // only vTokens may call borrowAllowed if borrower not in market\\r\\n            require(msg.sender == vToken, \\\"sender must be vToken\\\");\\r\\n\\r\\n            // attempt to add borrower to the market\\r\\n            Error err = addToMarketInternal(VToken(vToken), borrower);\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint(err);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (oracle.getUnderlyingPrice(VToken(vToken)) == 0) {\\r\\n            return uint(Error.PRICE_ERROR);\\r\\n        }\\r\\n\\r\\n        uint borrowCap = borrowCaps[vToken];\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (borrowCap != 0) {\\r\\n            uint totalBorrows = VToken(vToken).totalBorrows();\\r\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\r\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, VToken(vToken), 0, borrowAmount);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall != 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: VToken(vToken).borrowIndex()});\\r\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\r\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset whose underlying is being borrowed\\r\\n     * @param borrower The address borrowing the underlying\\r\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\r\\n     */\\r\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        borrower;\\r\\n        borrowAmount;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\r\\n     * @param vToken The market to verify the repay against\\r\\n     * @param payer The account which would repay the asset\\r\\n     * @param borrower The account which borrowed the asset\\r\\n     * @param repayAmount The amount of the underlying asset the account would repay\\r\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function repayBorrowAllowed(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    )\\r\\n        external\\r\\n        returns (uint)\\r\\n    {\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vToken, Action.REPAY);\\r\\n        // Shh - currently unused\\r\\n        payer;\\r\\n        borrower;\\r\\n        repayAmount;\\r\\n\\r\\n        ensureListed(markets[vToken]);\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: VToken(vToken).borrowIndex()});\\r\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\r\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being repaid\\r\\n     * @param payer The address repaying the borrow\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function repayBorrowVerify(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint borrowerIndex\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        payer;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        borrowerIndex;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the liquidation should be allowed to occur\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param repayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowAllowed(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    )\\r\\n        external\\r\\n        returns (uint)\\r\\n    {\\r\\n        checkProtocolPauseState();\\r\\n\\r\\n        // if we want to pause liquidating to vTokenCollateral, we should pause seizing\\r\\n        checkActionPauseState(vTokenBorrowed, Action.LIQUIDATE);\\r\\n\\r\\n        if (liquidatorContract != address(0) && liquidator != liquidatorContract) {\\r\\n            return uint(Error.UNAUTHORIZED);\\r\\n        }\\r\\n\\r\\n        ensureListed(markets[vTokenCollateral]);\\r\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\r\\n            ensureListed(markets[vTokenBorrowed]);\\r\\n        }\\r\\n\\r\\n        /* The borrower must have shortfall in order to be liquidatable */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, VToken(0), 0, 0);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall == 0) {\\r\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\r\\n        }\\r\\n\\r\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\r\\n        uint borrowBalance;\\r\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\r\\n            borrowBalance = VToken(vTokenBorrowed).borrowBalanceStored(borrower);\\r\\n        } else {\\r\\n            borrowBalance = mintedVAIs[borrower];\\r\\n        }\\r\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\r\\n        if (repayAmount > maxClose) {\\r\\n            return uint(Error.TOO_MUCH_REPAY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     * @param seizeTokens The amount of collateral token that will be seized\\r\\n     */\\r\\n    function liquidateBorrowVerify(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint seizeTokens\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        // Shh - currently unused\\r\\n        vTokenBorrowed;\\r\\n        vTokenCollateral;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the seizing of assets should be allowed to occur\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeAllowed(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    )\\r\\n        external\\r\\n        returns (uint)\\r\\n    {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vTokenCollateral, Action.SEIZE);\\r\\n\\r\\n        // Shh - currently unused\\r\\n        seizeTokens;\\r\\n\\r\\n        // We've added VAIController as a borrowed token list check for seize\\r\\n        ensureListed(markets[vTokenCollateral]);\\r\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\r\\n            ensureListed(markets[vTokenBorrowed]);\\r\\n        }\\r\\n\\r\\n        if (VToken(vTokenCollateral).comptroller() != VToken(vTokenBorrowed).comptroller()) {\\r\\n            return uint(Error.COMPTROLLER_MISMATCH);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vTokenCollateral);\\r\\n        distributeSupplierVenus(vTokenCollateral, borrower);\\r\\n        distributeSupplierVenus(vTokenCollateral, liquidator);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeVerify(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        // Shh - currently unused\\r\\n        vTokenCollateral;\\r\\n        vTokenBorrowed;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\r\\n     * @param vToken The market to verify the transfer against\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of vTokens to transfer\\r\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        checkProtocolPauseState();\\r\\n        checkActionPauseState(vToken, Action.TRANSFER);\\r\\n\\r\\n        // Currently the only consideration is whether or not\\r\\n        //  the src is allowed to redeem this many tokens\\r\\n        uint allowed = redeemAllowedInternal(vToken, src, transferTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, src);\\r\\n        distributeSupplierVenus(vToken, dst);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being transferred\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of vTokens to transfer\\r\\n     */\\r\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        src;\\r\\n        dst;\\r\\n        transferTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, VToken(0), 0, 0);\\r\\n\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint, uint, uint)\\r\\n    {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(\\r\\n            account,\\r\\n            VToken(vTokenModify),\\r\\n            redeemTokens,\\r\\n            borrowAmount\\r\\n        );\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @dev Note that we calculate the exchangeRateStored for each collateral vToken using stored data,\\r\\n     *  without calculating accumulated interest.\\r\\n     * @return (possible error code,\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidityInternal(\\r\\n        address account,\\r\\n        VToken vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (Error, uint, uint)\\r\\n    {\\r\\n        (uint err, uint liquidity, uint shortfall) = comptrollerLens.getHypotheticalAccountLiquidity(\\r\\n            address(this),\\r\\n            account,\\r\\n            vTokenModify,\\r\\n            redeemTokens,\\r\\n            borrowAmount\\r\\n        );\\r\\n        return (Error(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in vToken.liquidateBorrowFresh)\\r\\n     * @param vTokenBorrowed The address of the borrowed vToken\\r\\n     * @param vTokenCollateral The address of the collateral vToken\\r\\n     * @param actualRepayAmount The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\\r\\n     * @return (errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        uint actualRepayAmount\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint, uint)\\r\\n    {\\r\\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateCalculateSeizeTokens(\\r\\n            address(this),\\r\\n            vTokenBorrowed,\\r\\n            vTokenCollateral,\\r\\n            actualRepayAmount\\r\\n        );\\r\\n        return (err, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in vToken.liquidateBorrowFresh)\\r\\n     * @param vTokenCollateral The address of the collateral vToken\\r\\n     * @param actualRepayAmount The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\\r\\n     * @return (errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateVAICalculateSeizeTokens(\\r\\n        address vTokenCollateral,\\r\\n        uint actualRepayAmount\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint, uint)\\r\\n    {\\r\\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateVAICalculateSeizeTokens(\\r\\n            address(this),\\r\\n            vTokenCollateral,\\r\\n            actualRepayAmount\\r\\n        );\\r\\n        return (err, seizeTokens);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new price oracle for the comptroller\\r\\n      * @dev Admin function to set a new price oracle\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(address(newOracle));\\r\\n\\r\\n        // Track the old oracle for the comptroller\\r\\n        PriceOracle oldOracle = oracle;\\r\\n\\r\\n        // Set comptroller's oracle to newOracle\\r\\n        oracle = newOracle;\\r\\n\\r\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\r\\n        emit NewPriceOracle(oldOracle, newOracle);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the closeFactor used when liquidating borrows\\r\\n      * @dev Admin function to set closeFactor\\r\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise will revert\\r\\n      */\\r\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n\\r\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\r\\n        closeFactorMantissa = newCloseFactorMantissa;\\r\\n        emit NewCloseFactor(oldCloseFactorMantissa, newCloseFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n      * @notice Sets the address of the access control of this contract\\r\\n      * @dev Admin function to set the access control address\\r\\n      * @param newAccessControlAddress New address for the access control\\r\\n      * @return uint 0=success, otherwise will revert\\r\\n      */\\r\\n    function _setAccessControl(address newAccessControlAddress) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(newAccessControlAddress);\\r\\n\\r\\n        address oldAccessControlAddress = accessControl;\\r\\n        accessControl = newAccessControlAddress;\\r\\n        emit NewAccessControl(oldAccessControlAddress, accessControl);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the collateralFactor for a market\\r\\n      * @dev Restricted function to set per-market collateralFactor\\r\\n      * @param vToken The market to set the factor on\\r\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setCollateralFactor(VToken vToken, uint newCollateralFactorMantissa) external returns (uint) {\\r\\n        // Check caller is allowed by access control manager\\r\\n        ensureAllowed(\\\"_setCollateralFactor(address,uint256)\\\");\\r\\n        ensureNonzeroAddress(address(vToken));\\r\\n\\r\\n        // Verify market is listed\\r\\n        Market storage market = markets[address(vToken)];\\r\\n        ensureListed(market);\\r\\n\\r\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\r\\n\\r\\n        // Check collateral factor <= 0.9\\r\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\r\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\r\\n        }\\r\\n\\r\\n        // If collateral factor != 0, fail if price == 0\\r\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(vToken) == 0) {\\r\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\r\\n        }\\r\\n\\r\\n        // Set market's collateral factor to new collateral factor, remember old value\\r\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\r\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\r\\n\\r\\n        // Emit event with asset, old collateral factor, and new collateral factor\\r\\n        emit NewCollateralFactor(vToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets liquidationIncentive\\r\\n      * @dev Admin function to set liquidationIncentive\\r\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\r\\n        ensureAllowed(\\\"_setLiquidationIncentive(uint256)\\\");\\r\\n\\r\\n        require(newLiquidationIncentiveMantissa >= 1e18, \\\"incentive must be over 1e18\\\");\\r\\n\\r\\n        // Save current value for use in log\\r\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\r\\n\\r\\n        // Set liquidation incentive to new incentive\\r\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\r\\n\\r\\n        // Emit event with old incentive, new incentive\\r\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setLiquidatorContract(address newLiquidatorContract_) external {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n        address oldLiquidatorContract = liquidatorContract;\\r\\n        liquidatorContract = newLiquidatorContract_;\\r\\n        emit NewLiquidatorContract(oldLiquidatorContract, newLiquidatorContract_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Add the market to the markets mapping and set it as listed\\r\\n      * @dev Admin function to set isListed and add support for the market\\r\\n      * @param vToken The address of the market (token) to list\\r\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n      */\\r\\n    function _supportMarket(VToken vToken) external returns (uint) {\\r\\n        // console.log('_supportMarket 1');\\r\\n        ensureAllowed(\\\"_supportMarket(address)\\\");\\r\\n\\r\\n        // console.log('_supportMarket 2');\\r\\n        if (markets[address(vToken)].isListed) {\\r\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\r\\n        }\\r\\n\\r\\n        // console.log('_supportMarket 3');\\r\\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\\r\\n\\r\\n        // Note that isVenus is not in active use anymore\\r\\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\\r\\n        // console.log('_supportMarket 4');\\r\\n        _addMarketInternal(vToken);\\r\\n\\r\\n        emit MarketListed(vToken);\\r\\n        // console.log('_supportMarket end');\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _addMarketInternal(VToken vToken) internal {\\r\\n        for (uint i = 0; i < allMarkets.length; i++) {\\r\\n            require(allMarkets[i] != vToken, \\\"market already added\\\");\\r\\n        }\\r\\n        allMarkets.push(vToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Pause Guardian\\r\\n     * @param newPauseGuardian The address of the new Pause Guardian\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint) {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(newPauseGuardian);\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldPauseGuardian = pauseGuardian;\\r\\n\\r\\n        // Store pauseGuardian with value newPauseGuardian\\r\\n        pauseGuardian = newPauseGuardian;\\r\\n\\r\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\r\\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Set the given borrow caps for the given vToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\r\\n      * @dev Access is controled by ACM. A borrow cap of 0 corresponds to unlimited borrowing.\\r\\n      * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\r\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\r\\n      */\\r\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint[] calldata newBorrowCaps) external {\\r\\n        ensureAllowed(\\\"_setMarketBorrowCaps(address[],uint256[])\\\");\\r\\n\\r\\n        uint numMarkets = vTokens.length;\\r\\n        uint numBorrowCaps = newBorrowCaps.length;\\r\\n\\r\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\r\\n\\r\\n        for(uint i = 0; i < numMarkets; i++) {\\r\\n            borrowCaps[address(vTokens[i])] = newBorrowCaps[i];\\r\\n            emit NewBorrowCap(vTokens[i], newBorrowCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Set the given supply caps for the given vToken markets. Supply that brings total Supply to or above supply cap will revert.\\r\\n      * @dev Admin function to set the supply caps. A supply cap of 0 corresponds to Minting NotAllowed.\\r\\n      * @param vTokens The addresses of the markets (tokens) to change the supply caps for\\r\\n      * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed.\\r\\n      */\\r\\n    function _setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external {\\r\\n        ensureAllowed(\\\"_setMarketSupplyCaps(address[],uint256[])\\\");\\r\\n\\r\\n        uint numMarkets = vTokens.length;\\r\\n        uint numSupplyCaps = newSupplyCaps.length;\\r\\n\\r\\n        require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\r\\n\\r\\n        for(uint i; i < numMarkets; ++i) {\\r\\n            supplyCaps[address(vTokens[i])] = newSupplyCaps[i];\\r\\n            emit NewSupplyCap(vTokens[i], newSupplyCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set whole protocol pause/unpause state\\r\\n     */\\r\\n    function _setProtocolPaused(bool state) external returns(bool) {\\r\\n        ensureAllowed(\\\"_setProtocolPaused(bool)\\\");\\r\\n\\r\\n        protocolPaused = state;\\r\\n        emit ActionProtocolPaused(state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pause/unpause certain actions\\r\\n     * @param markets Markets to pause/unpause the actions on\\r\\n     * @param actions List of action ids to pause/unpause\\r\\n     * @param paused The new paused state (true=paused, false=unpaused)\\r\\n     */\\r\\n    function _setActionsPaused(\\r\\n        address[] calldata markets,\\r\\n        Action[] calldata actions,\\r\\n        bool paused\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        ensureAllowed(\\\"_setActionsPaused(address[],uint256[],bool)\\\");\\r\\n\\r\\n        uint256 numMarkets = markets.length;\\r\\n        uint256 numActions = actions.length;\\r\\n        for (uint marketIdx; marketIdx < numMarkets; ++marketIdx) {\\r\\n            for (uint actionIdx; actionIdx < numActions; ++actionIdx) {\\r\\n                setActionPausedInternal(markets[marketIdx], actions[actionIdx], paused);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause/unpause an action on a market\\r\\n     * @param market Market to pause/unpause the action on\\r\\n     * @param action Action id to pause/unpause\\r\\n     * @param paused The new paused state (true=paused, false=unpaused)\\r\\n     */\\r\\n    function setActionPausedInternal(address market, Action action, bool paused) internal {\\r\\n        ensureListed(markets[market]);\\r\\n        _actionPaused[market][uint(action)] = paused;\\r\\n        emit ActionPausedMarket(VToken(market), action, paused);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new VAI controller\\r\\n      * @dev Admin function to set a new VAI controller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setVAIController(VAIControllerInterface vaiController_) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(address(vaiController_));\\r\\n\\r\\n        VAIControllerInterface oldVaiController = vaiController;\\r\\n        vaiController = vaiController_;\\r\\n        emit NewVAIController(oldVaiController, vaiController_);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setVAIMintRate(uint newVAIMintRate) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n        uint oldVAIMintRate = vaiMintRate;\\r\\n        vaiMintRate = newVAIMintRate;\\r\\n        emit NewVAIMintRate(oldVAIMintRate, newVAIMintRate);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setTreasuryData(address newTreasuryGuardian, address newTreasuryAddress, uint newTreasuryPercent) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdminOr(treasuryGuardian);\\r\\n\\r\\n        require(newTreasuryPercent < 1e18, \\\"treasury percent cap overflow\\\");\\r\\n        ensureNonzeroAddress(newTreasuryGuardian);\\r\\n        ensureNonzeroAddress(newTreasuryAddress);\\r\\n\\r\\n        address oldTreasuryGuardian = treasuryGuardian;\\r\\n        address oldTreasuryAddress = treasuryAddress;\\r\\n        uint oldTreasuryPercent = treasuryPercent;\\r\\n\\r\\n        treasuryGuardian = newTreasuryGuardian;\\r\\n        treasuryAddress = newTreasuryAddress;\\r\\n        treasuryPercent = newTreasuryPercent;\\r\\n\\r\\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\\r\\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\\r\\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _become(Unitroller unitroller) external {\\r\\n        require(msg.sender == unitroller.admin(), \\\"only unitroller admin can\\\");\\r\\n        require(unitroller._acceptImplementation() == 0, \\\"not authorized\\\");\\r\\n    }\\r\\n\\r\\n    /*** Venus Distribution ***/\\r\\n\\r\\n    function setVenusSpeedInternal(VToken vToken, uint venusSpeed) internal {\\r\\n        uint currentVenusSpeed = venusSpeeds[address(vToken)];\\r\\n        if (currentVenusSpeed != 0) {\\r\\n            // note that XVS speed could be set to 0 to halt liquidity rewards for a market\\r\\n            Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\\r\\n            updateVenusSupplyIndex(address(vToken));\\r\\n            updateVenusBorrowIndex(address(vToken), borrowIndex);\\r\\n        } else if (venusSpeed != 0) {\\r\\n            // Add the XVS market\\r\\n            ensureListed(markets[address(vToken)]);\\r\\n\\r\\n            if (venusSupplyState[address(vToken)].index == 0 && venusSupplyState[address(vToken)].block == 0) {\\r\\n                venusSupplyState[address(vToken)] = VenusMarketState({\\r\\n                    index: venusInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n            }\\r\\n\\r\\n\\r\\n            if (venusBorrowState[address(vToken)].index == 0 && venusBorrowState[address(vToken)].block == 0) {\\r\\n                venusBorrowState[address(vToken)] = VenusMarketState({\\r\\n                    index: venusInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (currentVenusSpeed != venusSpeed) {\\r\\n            venusSpeeds[address(vToken)] = venusSpeed;\\r\\n            emit VenusSpeedUpdated(vToken, venusSpeed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ComptrollerLens contract address\\r\\n     */\\r\\n    function _setComptrollerLens(ComptrollerLensInterface comptrollerLens_) external returns (uint) {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(address(comptrollerLens_));\\r\\n        address oldComptrollerLens = address(comptrollerLens);\\r\\n        comptrollerLens = comptrollerLens_;\\r\\n        emit NewComptrollerLens(oldComptrollerLens, address(comptrollerLens));\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue XVS to the market by updating the supply index\\r\\n     * @param vToken The market whose supply index to update\\r\\n     */\\r\\n    function updateVenusSupplyIndex(address vToken) internal {\\r\\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\\r\\n        uint supplySpeed = venusSpeeds[vToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\r\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\r\\n            uint supplyTokens = VToken(vToken).totalSupply();\\r\\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\\r\\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\r\\n            venusSupplyState[vToken] = VenusMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index overflows\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number overflows\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue XVS to the market by updating the borrow index\\r\\n     * @param vToken The market whose borrow index to update\\r\\n     */\\r\\n    function updateVenusBorrowIndex(address vToken, Exp memory marketBorrowIndex) internal {\\r\\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\\r\\n        uint borrowSpeed = venusSpeeds[vToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\r\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\r\\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\r\\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\\r\\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\r\\n            venusBorrowState[vToken] = VenusMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index overflows\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number overflows\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate XVS accrued by a supplier and possibly transfer it to them\\r\\n     * @param vToken The market in which the supplier is interacting\\r\\n     * @param supplier The address of the supplier to distribute XVS to\\r\\n     */\\r\\n    function distributeSupplierVenus(address vToken, address supplier) internal {\\r\\n        if (address(vaiVaultAddress) != address(0)) {\\r\\n            releaseToVault();\\r\\n        }\\r\\n\\r\\n        VenusMarketState memory supplyState = venusSupplyState[vToken];\\r\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\r\\n        Double memory supplierIndex = Double({mantissa: venusSupplierIndex[vToken][supplier]});\\r\\n        venusSupplierIndex[vToken][supplier] = supplyIndex.mantissa;\\r\\n\\r\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\r\\n            supplierIndex.mantissa = venusInitialIndex;\\r\\n        }\\r\\n\\r\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\r\\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\\r\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\r\\n        uint supplierAccrued = add_(venusAccrued[supplier], supplierDelta);\\r\\n        venusAccrued[supplier] = supplierAccrued;\\r\\n        emit DistributedSupplierVenus(VToken(vToken), supplier, supplierDelta, supplyIndex.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate XVS accrued by a borrower and possibly transfer it to them\\r\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\r\\n     * @param vToken The market in which the borrower is interacting\\r\\n     * @param borrower The address of the borrower to distribute XVS to\\r\\n     */\\r\\n    function distributeBorrowerVenus(address vToken, address borrower, Exp memory marketBorrowIndex) internal {\\r\\n        if (address(vaiVaultAddress) != address(0)) {\\r\\n            releaseToVault();\\r\\n        }\\r\\n\\r\\n        VenusMarketState memory borrowState = venusBorrowState[vToken];\\r\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\r\\n        Double memory borrowerIndex = Double({mantissa: venusBorrowerIndex[vToken][borrower]});\\r\\n        venusBorrowerIndex[vToken][borrower] = borrowIndex.mantissa;\\r\\n\\r\\n        if (borrowerIndex.mantissa > 0) {\\r\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\r\\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\\r\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n            uint borrowerAccrued = add_(venusAccrued[borrower], borrowerDelta);\\r\\n            venusAccrued[borrower] = borrowerAccrued;\\r\\n            emit DistributedBorrowerVenus(VToken(vToken), borrower, borrowerDelta, borrowIndex.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in all markets and VAI\\r\\n     * @param holder The address to claim XVS for\\r\\n     */\\r\\n    function claimVenus(address holder) public {\\r\\n        return claimVenus(holder, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in the specified markets\\r\\n     * @param holder The address to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     */\\r\\n    function claimVenus(address holder, VToken[] memory vTokens) public {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimVenus(holders, vTokens, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all xvs accrued by the holders\\r\\n     * @param holders The addresses to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     * @param borrowers Whether or not to claim XVS earned by borrowing\\r\\n     * @param suppliers Whether or not to claim XVS earned by supplying\\r\\n     */\\r\\n     function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\\r\\n        claimVenus(holders, vTokens, borrowers, suppliers, false);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all xvs accrued by the holders\\r\\n     * @param holders The addresses to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     * @param borrowers Whether or not to claim XVS earned by borrowing\\r\\n     * @param suppliers Whether or not to claim XVS earned by supplying\\r\\n     * @param collateral Whether or not to use XVS earned as collateral, only takes effect when the holder has a shortfall\\r\\n     */\\r\\n    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers, bool collateral) public {\\r\\n        uint j;\\r\\n        for (uint i = 0; i < vTokens.length; i++) {\\r\\n            VToken vToken = vTokens[i];\\r\\n            ensureListed(markets[address(vToken)]);\\r\\n            if (borrowers) {\\r\\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\\r\\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\\r\\n                for (j = 0; j < holders.length; j++) {\\r\\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\\r\\n                }\\r\\n            }\\r\\n            if (suppliers) {\\r\\n                updateVenusSupplyIndex(address(vToken));\\r\\n                for (j = 0; j < holders.length; j++) {\\r\\n                    distributeSupplierVenus(address(vToken), holders[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (j = 0; j < holders.length; j++) {\\r\\n            address holder = holders[j];\\r\\n            // If there is a positive shortfall, the XVS reward is accrued,\\r\\n            // but won't be granted to this holder\\r\\n            (, , uint shortfall) = getHypotheticalAccountLiquidityInternal(holder, VToken(0), 0, 0);\\r\\n            venusAccrued[holder] = grantXVSInternal(holder, venusAccrued[holder], shortfall, collateral);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in all markets, a shorthand for `claimVenus` with collateral set to `true`\\r\\n     * @param holder The address to claim XVS for\\r\\n     */\\r\\n    function claimVenusAsCollateral(address holder) external {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimVenus(holders, allMarkets, true, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to the user with user's shortfall considered\\r\\n     * @dev Note: If there is not enough XVS, we do not perform the transfer all.\\r\\n     * @param user The address of the user to transfer XVS to\\r\\n     * @param amount The amount of XVS to (possibly) transfer\\r\\n     * @param shortfall The shortfall of the user\\r\\n     * @param collateral Whether or not we will use user's venus reward as collateral to pay off the debt\\r\\n     * @return The amount of XVS which was NOT transferred to the user\\r\\n     */\\r\\n    function grantXVSInternal(address user, uint amount, uint shortfall, bool collateral) internal returns (uint) {\\r\\n        // If the user is blacklisted, they can't get XVS rewards\\r\\n        require(\\r\\n            user != 0xEF044206Db68E40520BfA82D45419d498b4bc7Bf\\r\\n            && user != 0x7589dD3355DAE848FDbF75044A3495351655cB1A\\r\\n            && user != 0x33df7a7F6D44307E1e5F3B15975b47515e5524c0\\r\\n            && user != 0x24e77E5b74B30b026E9996e4bc3329c881e24968,\\r\\n            \\\"Blacklisted\\\"\\r\\n        );\\r\\n\\r\\n        XVS xvs = XVS(getXVSAddress());\\r\\n        uint venusRemaining = xvs.balanceOf(address(this));\\r\\n        bool bankrupt = shortfall > 0;\\r\\n\\r\\n        if (amount == 0 || amount > venusRemaining) {\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // If user's not bankrupt, user can get the reward,\\r\\n        // so the liquidators will have chances to liquidate bankrupt accounts\\r\\n        if (!bankrupt) {\\r\\n            xvs.transfer(user, amount);\\r\\n            return 0;\\r\\n        }\\r\\n        // If user's bankrupt and doesn't use pending xvs as collateral, don't grant\\r\\n        // anything, otherwise, we will transfer the pending xvs as collateral to\\r\\n        // vXVS token and mint vXVS for the user.\\r\\n        //\\r\\n        // If mintBehalf failed, don't grant any xvs\\r\\n        require(collateral, \\\"bankrupt accounts can only collateralize their pending xvs rewards\\\");\\r\\n\\r\\n        xvs.approve(getXVSVTokenAddress(), amount);\\r\\n        require(\\r\\n            VBep20Interface(getXVSVTokenAddress()).mintBehalf(user, amount) == uint(Error.NO_ERROR),\\r\\n            \\\"mint behalf error during collateralize xvs\\\"\\r\\n        );\\r\\n\\r\\n        // set venusAccrue[user] to 0\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /*** Venus Distribution Admin ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to the recipient\\r\\n     * @dev Note: If there is not enough XVS, we do not perform the transfer all.\\r\\n     * @param recipient The address of the recipient to transfer XVS to\\r\\n     * @param amount The amount of XVS to (possibly) transfer\\r\\n     */\\r\\n    function _grantXVS(address recipient, uint amount) external {\\r\\n        ensureAdminOr(comptrollerImplementation);\\r\\n        uint amountLeft = grantXVSInternal(recipient, amount, 0, false);\\r\\n        require(amountLeft == 0, \\\"insufficient xvs for grant\\\");\\r\\n        emit VenusGranted(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the amount of XVS distributed per block to VAI Vault\\r\\n     * @param venusVAIVaultRate_ The amount of XVS wei per block to distribute to VAI Vault\\r\\n     */\\r\\n    function _setVenusVAIVaultRate(uint venusVAIVaultRate_) external {\\r\\n        ensureAdmin();\\r\\n\\r\\n        uint oldVenusVAIVaultRate = venusVAIVaultRate;\\r\\n        venusVAIVaultRate = venusVAIVaultRate_;\\r\\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the VAI Vault infos\\r\\n     * @param vault_ The address of the VAI Vault\\r\\n     * @param releaseStartBlock_ The start block of release to VAI Vault\\r\\n     * @param minReleaseAmount_ The minimum release amount to VAI Vault\\r\\n     */\\r\\n    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) external {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(vault_);\\r\\n\\r\\n        vaiVaultAddress = vault_;\\r\\n        releaseStartBlock = releaseStartBlock_;\\r\\n        minReleaseAmount = minReleaseAmount_;\\r\\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set XVS speed for a single market\\r\\n     * @param vToken The market whose XVS speed to update\\r\\n     * @param venusSpeed New XVS speed for market\\r\\n     */\\r\\n    function _setVenusSpeed(VToken vToken, uint venusSpeed) external {\\r\\n        ensureAdminOr(comptrollerImplementation);\\r\\n        ensureNonzeroAddress(address(vToken));\\r\\n        setVenusSpeedInternal(vToken, venusSpeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the markets\\r\\n     * @dev The automatic getter may be used to access an individual market.\\r\\n     * @return The list of market addresses\\r\\n     */\\r\\n    function getAllMarkets() public view returns (VToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n\\r\\n    function getBlockNumber() public view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the XVS token\\r\\n     * @return The address of XVS\\r\\n     */\\r\\n    function getXVSAddress() public view returns (address) {\\r\\n        return 0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the XVS vToken\\r\\n     * @return The address of XVS vToken\\r\\n     */\\r\\n    function getXVSVTokenAddress() public view returns (address) {\\r\\n        return 0x151B1e2635A717bcDc836ECd6FbB62B674FE3E1D;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a certain action is paused on a market\\r\\n     * @param action Action id\\r\\n     * @param market vToken address\\r\\n     */\\r\\n    function actionPaused(address market, Action action) public view returns (bool) {\\r\\n        return _actionPaused[market][uint(action)];\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** VAI functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set the minted VAI amount of the `owner`\\r\\n     * @param owner The address of the account to set\\r\\n     * @param amount The amount of VAI to set to the account\\r\\n     * @return The number of minted VAI by `owner`\\r\\n     */\\r\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint) {\\r\\n        checkProtocolPauseState();\\r\\n\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \\\"VAI is paused\\\");\\r\\n        // Check caller is vaiController\\r\\n        if (msg.sender != address(vaiController)) {\\r\\n            return fail(Error.REJECTION, FailureInfo.SET_MINTED_VAI_REJECTION);\\r\\n        }\\r\\n        mintedVAIs[owner] = amount;\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to VAI Vault\\r\\n     */\\r\\n    function releaseToVault() public {\\r\\n        if(releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        XVS xvs = XVS(getXVSAddress());\\r\\n\\r\\n        uint256 xvsBalance = xvs.balanceOf(address(this));\\r\\n        if(xvsBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 actualAmount;\\r\\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\\r\\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\\r\\n        uint256 _releaseAmount = mul_(venusVAIVaultRate, deltaBlocks);\\r\\n\\r\\n        if (xvsBalance >= _releaseAmount) {\\r\\n            actualAmount = _releaseAmount;\\r\\n        } else {\\r\\n            actualAmount = xvsBalance;\\r\\n        }\\r\\n\\r\\n        if (actualAmount < minReleaseAmount) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        releaseStartBlock = getBlockNumber();\\r\\n\\r\\n        xvs.transfer(vaiVaultAddress, actualAmount);\\r\\n        emit DistributedVAIVaultVenus(actualAmount);\\r\\n\\r\\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81a9053ec01781f19770dc864fda4cc5ac48200d74a938bd89f75037c8aad8fd\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\n\\r\\ncontract ComptrollerInterfaceG1 {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\r\\n    function exitMarket(address vToken) external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\r\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\r\\n\\r\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\r\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\r\\n\\r\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\r\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\r\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        uint repayAmount) external view returns (uint, uint);\\r\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\r\\n}\\r\\n\\r\\ncontract ComptrollerInterfaceG2 is ComptrollerInterfaceG1 {\\r\\n    function liquidateVAICalculateSeizeTokens(\\r\\n        address vTokenCollateral,\\r\\n        uint repayAmount) external view returns (uint, uint);\\r\\n}\\r\\n\\r\\ncontract ComptrollerInterface is ComptrollerInterfaceG2 {\\r\\n    function markets(address) external view returns (bool, uint);\\r\\n    function oracle() external view returns (PriceOracle);\\r\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\r\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\r\\n    function claimVenus(address) external;\\r\\n    function venusAccrued(address) external view returns (uint);\\r\\n    function venusSpeeds(address) external view returns (uint);\\r\\n    function getAllMarkets() external view returns (VToken[] memory);\\r\\n    function venusSupplierIndex(address, address) external view returns (uint);\\r\\n    function venusInitialIndex() external view returns (uint224);\\r\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\r\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\r\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\r\\n}\\r\\n\\r\\ninterface IVAIVault {\\r\\n    function updatePendingRewards() external;\\r\\n}\\r\\n\\r\\ninterface IComptroller {\\r\\n    function liquidationIncentiveMantissa() external view returns (uint);\\r\\n    /*** Treasury Data ***/\\r\\n    function treasuryAddress() external view returns (address);\\r\\n    function treasuryPercent() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x6fd49cb706d00d51e887175d665d9035e386722cddf69fa508ae71458856ee48\"},\"contracts/ComptrollerLensInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ninterface ComptrollerLensInterface {\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address comptroller, \\r\\n        address vTokenBorrowed, \\r\\n        address vTokenCollateral, \\r\\n        uint actualRepayAmount\\r\\n    ) external view returns (uint, uint);\\r\\n    function liquidateVAICalculateSeizeTokens(\\r\\n        address comptroller,\\r\\n        address vTokenCollateral, \\r\\n        uint actualRepayAmount\\r\\n    ) external view returns (uint, uint);\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address comptroller,\\r\\n        address account,\\r\\n        VToken vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) external view returns (uint, uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x194475bdcad89795ec5a6f07e9bafdceecd4036362467601a3470bc2061fd95a\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./VAIControllerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerLensInterface.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of Unitroller\\r\\n    */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of Unitroller\\r\\n    */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n\\r\\n    /**\\r\\n     * @notice Oracle which gives the price of any given asset\\r\\n     */\\r\\n    PriceOracle public oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n     */\\r\\n    uint public closeFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n     */\\r\\n    uint public liquidationIncentiveMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n     */\\r\\n    uint public maxAssets;\\r\\n\\r\\n    /**\\r\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n     */\\r\\n    mapping(address => VToken[]) public accountAssets;\\r\\n\\r\\n    struct Market {\\r\\n        /// @notice Whether or not this market is listed\\r\\n        bool isListed;\\r\\n\\r\\n        /**\\r\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\r\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n         *  Must be between 0 and 1, and stored as a mantissa.\\r\\n         */\\r\\n        uint collateralFactorMantissa;\\r\\n\\r\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\r\\n        mapping(address => bool) accountMembership;\\r\\n\\r\\n        /// @notice Whether or not this market receives XVS\\r\\n        bool isVenus;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Official mapping of vTokens -> Market metadata\\r\\n     * @dev Used e.g. to determine if a market is supported\\r\\n     */\\r\\n    mapping(address => Market) public markets;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     */\\r\\n    address public pauseGuardian;\\r\\n\\r\\n    /// @notice Whether minting is paused (deprecated, superseded by actionPaused)\\r\\n    bool private _mintGuardianPaused;\\r\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\r\\n    bool private _borrowGuardianPaused;\\r\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\r\\n    bool internal transferGuardianPaused;\\r\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\r\\n    bool internal seizeGuardianPaused;\\r\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\r\\n    mapping(address => bool) internal mintGuardianPaused;\\r\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\r\\n    mapping(address => bool) internal borrowGuardianPaused;\\r\\n\\r\\n    struct VenusMarketState {\\r\\n        /// @notice The market's last updated venusBorrowIndex or venusSupplyIndex\\r\\n        uint224 index;\\r\\n\\r\\n        /// @notice The block number the index was last updated at\\r\\n        uint32 block;\\r\\n    }\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    VToken[] public allMarkets;\\r\\n\\r\\n    /// @notice The rate at which the flywheel distributes XVS, per block\\r\\n    uint public venusRate;\\r\\n\\r\\n    /// @notice The portion of venusRate that each market currently receives\\r\\n    mapping(address => uint) public venusSpeeds;\\r\\n\\r\\n    /// @notice The Venus market supply state for each market\\r\\n    mapping(address => VenusMarketState) public venusSupplyState;\\r\\n\\r\\n    /// @notice The Venus market borrow state for each market\\r\\n    mapping(address => VenusMarketState) public venusBorrowState;\\r\\n\\r\\n    /// @notice The Venus supply index for each market for each supplier as of the last time they accrued XVS\\r\\n    mapping(address => mapping(address => uint)) public venusSupplierIndex;\\r\\n\\r\\n    /// @notice The Venus borrow index for each market for each borrower as of the last time they accrued XVS\\r\\n    mapping(address => mapping(address => uint)) public venusBorrowerIndex;\\r\\n\\r\\n    /// @notice The XVS accrued but not yet transferred to each user\\r\\n    mapping(address => uint) public venusAccrued;\\r\\n\\r\\n    /// @notice The Address of VAIController\\r\\n    VAIControllerInterface public vaiController;\\r\\n\\r\\n    /// @notice The minted VAI amount to each user\\r\\n    mapping(address => uint) public mintedVAIs;\\r\\n\\r\\n    /// @notice VAI Mint Rate as a percentage\\r\\n    uint public vaiMintRate;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     */\\r\\n    bool public mintVAIGuardianPaused;\\r\\n    bool public repayVAIGuardianPaused;\\r\\n\\r\\n    /**\\r\\n     * @notice Pause/Unpause whole protocol actions\\r\\n     */\\r\\n    bool public protocolPaused;\\r\\n\\r\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Minters, per block (deprecated)\\r\\n    uint private venusVAIRate;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Vault, per block\\r\\n    uint public venusVAIVaultRate;\\r\\n\\r\\n    // address of VAI Vault\\r\\n    address public vaiVaultAddress;\\r\\n\\r\\n    // start block of release to VAI Vault\\r\\n    uint256 public releaseStartBlock;\\r\\n\\r\\n    // minimum release amount to VAI Vault\\r\\n    uint256 public minReleaseAmount;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n    address public borrowCapGuardian;\\r\\n\\r\\n    /// @notice Borrow caps enforced by borrowAllowed for each vToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n    mapping(address => uint) public borrowCaps;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\r\\n    /// @notice Treasury Guardian address\\r\\n    address public treasuryGuardian;\\r\\n\\r\\n    /// @notice Treasury address\\r\\n    address public treasuryAddress;\\r\\n\\r\\n    /// @notice Fee percent of accrued interest with decimal 18\\r\\n    uint256 public treasuryPercent;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\r\\n    /// @notice The portion of XVS that each contributor receives per block (deprecated)\\r\\n    mapping(address => uint) private venusContributorSpeeds;\\r\\n\\r\\n    /// @notice Last block at which a contributor's XVS rewards have been allocated (deprecated)\\r\\n    mapping(address => uint) private lastContributorBlock;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\r\\n    address public liquidatorContract;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\r\\n    ComptrollerLensInterface public comptrollerLens;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\\r\\n    \\r\\n    /// @notice Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\\r\\n    mapping(address => uint256) public supplyCaps;\\r\\n}\\r\\n    \\r\\ncontract ComptrollerV9Storage is ComptrollerV8Storage {\\r\\n    /// @notice AccessControlManager address\\r\\n    address accessControl;\\r\\n\\r\\n    enum Action {\\r\\n        MINT,\\r\\n        REDEEM,\\r\\n        BORROW,\\r\\n        REPAY,\\r\\n        SEIZE,\\r\\n        LIQUIDATE,\\r\\n        TRANSFER,\\r\\n        ENTER_MARKET,\\r\\n        EXIT_MARKET\\r\\n    }\\r\\n\\r\\n    /// @notice True if a certain action is paused on a certain market\\r\\n    mapping (address => mapping(uint => bool)) internal _actionPaused;\\r\\n}\\r\\n\",\"keccak256\":\"0x82325069f5054726f7abea3103f27b62ef95764048099bd2a256f4e2abfaec67\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title BEP 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x33c5c2c7a45637618ec3ff2741c6902c356ef9ced300a0779edb5238791bf70f\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of BEP20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x210d80c5343b519cbb0745bc5c7157b79100c5870c80a90596bbeff9186c2b5c\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY,\\r\\n        INSUFFICIENT_BALANCE_FOR_VAI\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        SET_VAI_MINT_RATE_CHECK,\\r\\n        SET_VAICONTROLLER_OWNER_CHECK,\\r\\n        SET_MINTED_VAI_REJECTION,\\r\\n        SET_TREASURY_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED,\\r\\n        TOKEN_PRICE_ERROR\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\r\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\r\\n        REPAY_VAI_FRESHNESS_CHECK,\\r\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_FEE_CALCULATION_FAILED\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract VAIControllerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        PRICE_ERROR,\\r\\n        MATH_ERROR,\\r\\n        INSUFFICIENT_BALANCE_FOR_VAI\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        VAI_MINT_REJECTION,\\r\\n        VAI_BURN_REJECTION,\\r\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\r\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_FEE_CALCULATION_FAILED,\\r\\n        SET_TREASURY_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x08bdc77bdcb6954ce9d0367de18184644f30afdc959f54e226788e8813ea3654\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CarefulMath.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Venus\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract Exponential is CarefulMath, ExponentialNoError {\\r\\n    /**\\r\\n     * @dev Creates an exponential from numerator and denominator values.\\r\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\r\\n     *            or if `denom` is zero.\\r\\n     */\\r\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(product));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return addUInt(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\r\\n     */\\r\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\r\\n        /*\\r\\n          We are doing this as:\\r\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\r\\n\\r\\n          How it works:\\r\\n          Exp = a / b;\\r\\n          Scalar = s;\\r\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\r\\n        */\\r\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n        return getExp(numerator, divisor.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(fraction));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n\\r\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\r\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\r\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\r\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\r\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\r\\n        assert(err2 == MathError.NO_ERROR);\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\r\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies three exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, ab);\\r\\n        }\\r\\n        return mulExp(ab, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two exponentials, returning a new exponential.\\r\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\r\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\r\\n     */\\r\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        return getExp(a.mantissa, b.mantissa);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f441978e19b6e2788386a713bbe330345d98a782da025f583d9dbdb716ab745\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return add_(a, b, \\\"addition overflow\\\");\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        if (a == 0 || b == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return div_(a, b, \\\"divide by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ed4e4fc1926f2db120798edbd049838c4d47fdbf3416a9aeb4a91ae1872dfc7\"},\"contracts/Governance/XVS.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract Owned {\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner, \\\"Should be owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Tokenlock is Owned {\\r\\n    /// @notice Indicates if token is locked\\r\\n    uint8 isLocked = 0;\\r\\n\\r\\n    event Freezed();\\r\\n    event UnFreezed();\\r\\n\\r\\n    modifier validLock {\\r\\n        require(isLocked == 0, \\\"Token is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function freeze() public onlyOwner {\\r\\n        isLocked = 1;\\r\\n\\r\\n        emit Freezed();\\r\\n    }\\r\\n\\r\\n    function unfreeze() public onlyOwner {\\r\\n        isLocked = 0;\\r\\n\\r\\n        emit UnFreezed();\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract XVS is Tokenlock {\\r\\n    /// @notice BEP-20 token name for this token\\r\\n    string public constant name = \\\"Venus\\\";\\r\\n\\r\\n    /// @notice BEP-20 token symbol for this token\\r\\n    string public constant symbol = \\\"XVS\\\";\\r\\n\\r\\n    /// @notice BEP-20 token decimals for this token\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint public constant totalSupply = 30000000e18; // 30 million XVS\\r\\n\\r\\n    /// @notice Allowance amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint96)) internal allowances;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping (address => uint96) internal balances;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address => address) public delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address => uint) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    /// @notice The standard BEP-20 transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /// @notice The standard BEP-20 approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new XVS token\\r\\n     * @param account The initial account to grant all the tokens\\r\\n     */\\r\\n    constructor(address account) public {\\r\\n        balances[account] = uint96(totalSupply);\\r\\n        emit Transfer(address(0), account, totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\r\\n     * @param account The address of the account holding the funds\\r\\n     * @param spender The address of the account spending the funds\\r\\n     * @return The number of tokens approved\\r\\n     */\\r\\n    function allowance(address account, address spender) external view returns (uint) {\\r\\n        return allowances[account][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint rawAmount) external validLock returns (bool) {\\r\\n        uint96 amount;\\r\\n        if (rawAmount == uint(-1)) {\\r\\n            amount = uint96(-1);\\r\\n        } else {\\r\\n            amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\r\\n        }\\r\\n\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens held by the `account`\\r\\n     * @param account The address of the account to get the balance of\\r\\n     * @return The number of tokens held\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint) {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint rawAmount) external validLock returns (bool) {\\r\\n        uint96 amount = safe96(rawAmount, \\\"XVS::transfer: amount exceeds 96 bits\\\");\\r\\n        _transferTokens(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint rawAmount) external validLock returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint96 spenderAllowance = allowances[src][spender];\\r\\n        uint96 amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\r\\n\\r\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\r\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"XVS::transferFrom: transfer amount exceeds spender allowance\\\");\\r\\n            allowances[src][spender] = newAllowance;\\r\\n\\r\\n            emit Approval(src, spender, newAllowance);\\r\\n        }\\r\\n\\r\\n        _transferTokens(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) public validLock {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public validLock {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"XVS::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"XVS::delegateBySig: invalid nonce\\\");\\r\\n        require(now <= expiry, \\\"XVS::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint96) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\r\\n        require(blockNumber < block.number, \\\"XVS::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = balances[delegator];\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\r\\n        require(src != address(0), \\\"XVS::_transferTokens: cannot transfer from the zero address\\\");\\r\\n        require(dst != address(0), \\\"XVS::_transferTokens: cannot transfer to the zero address\\\");\\r\\n\\r\\n        balances[src] = sub96(balances[src], amount, \\\"XVS::_transferTokens: transfer amount exceeds balance\\\");\\r\\n        balances[dst] = add96(balances[dst], amount, \\\"XVS::_transferTokens: transfer amount overflows\\\");\\r\\n        emit Transfer(src, dst, amount);\\r\\n\\r\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"XVS::_moveVotes: vote amount underflows\\\");\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"XVS::_moveVotes: vote amount overflows\\\");\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\r\\n      uint32 blockNumber = safe32(block.number, \\\"XVS::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n      } else {\\r\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n      }\\r\\n\\r\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x76687315dd5fbbc7a62fbdd8517b94fcb9b1192cb269cbd79d999f85989b578c\"},\"contracts/IAccessControlManager.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ninterface IAccessControlManager {\\r\\n   /**\\r\\n     * @notice Verifies if the given account can call a praticular contract's function\\r\\n     * @dev Since the contract is calling itself this function, we can get contracts address with msg.sender\\r\\n     * @param account address (eoa or contract) for which call permissions will be checked\\r\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\r\\n     * @return false if the user account cannot call the particular contract function\\r\\n     *\\r\\n     */\\r\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gives a function call permission to one single account\\r\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\r\\n     * \\t\\tMay emit a {RoleGranted} event.\\r\\n     * @param contractAddress address of contract for which call permissions will be granted\\r\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\r\\n     */\\r\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Revokes an account's permission to a particular function call\\r\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\r\\n     * \\t\\tMay emit a {RoleRevoked} event.\\r\\n     * @param contractAddress address of contract for which call permissions will be revoked\\r\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\r\\n     */\\r\\n    function revokeCallPermission(address contractAddress, string calldata functionSig, address accountToRevoke) external;\\r\\n}\",\"keccak256\":\"0xe77af8a814b270fabdce5d617cba1f3f5df0837e3cd91858bdaa38431b553f15\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Venus's InterestRateModel Interface\\r\\n  * @author Venus\\r\\n  */\\r\\ncontract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amnount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amnount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9db9f1b8de79d4a3780a4475f92028794e36829d82b587339db3afd415d4e3\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ncontract PriceOracle {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    bool public constant isPriceOracle = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Get the underlying price of a vToken asset\\r\\n      * @param vToken The vToken to get the underlying price of\\r\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n      *  Zero means the price is unavailable.\\r\\n      */\\r\\n    function getUnderlyingPrice(VToken vToken) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x1da723eb84ea9aa8431516821895f531150bb490fcc442b29f26428e3409083f\"},\"contracts/Unitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\n/**\\r\\n * @title ComptrollerCore\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * VTokens should reference this contract as their comptroller.\\r\\n */\\r\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\r\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = comptrollerImplementation;\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        comptrollerImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48ae427cb2a289e210b240506cbcce2d6fb2e2c8f13a60ff3db0376cba842a4c\"},\"contracts/VAI/VAI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.5.16 <0.8.0;\\r\\n\\r\\nimport \\\"./lib.sol\\\";\\r\\n\\r\\ncontract VAI is LibNote {\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint) public wards;\\r\\n    function rely(address guy) external note auth { wards[guy] = 1; }\\r\\n    function deny(address guy) external note auth { wards[guy] = 0; }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"VAI/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- BEP20 Data ---\\r\\n    string  public constant name     = \\\"VAI Stablecoin\\\";\\r\\n    string  public constant symbol   = \\\"VAI\\\";\\r\\n    string  public constant version  = \\\"1\\\";\\r\\n    uint8   public constant decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping (address => uint)                      public balanceOf;\\r\\n    mapping (address => mapping (address => uint)) public allowance;\\r\\n    mapping (address => uint)                      public nonces;\\r\\n\\r\\n    event Approval(address indexed src, address indexed guy, uint wad);\\r\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\r\\n\\r\\n    // --- Math ---\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, \\\"VAI math error\\\");\\r\\n    }\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, \\\"VAI math error\\\");\\r\\n    }\\r\\n\\r\\n    // --- EIP712 niceties ---\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\r\\n\\r\\n    constructor(uint256 chainId_) public {\\r\\n        wards[msg.sender] = 1;\\r\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\r\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n            keccak256(bytes(name)),\\r\\n            keccak256(bytes(version)),\\r\\n            chainId_,\\r\\n            address(this)\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // --- Token ---\\r\\n    function transfer(address dst, uint wad) external returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n        public returns (bool)\\r\\n    {\\r\\n        require(balanceOf[src] >= wad, \\\"VAI/insufficient-balance\\\");\\r\\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\\r\\n            require(allowance[src][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\r\\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\\r\\n        }\\r\\n        balanceOf[src] = sub(balanceOf[src], wad);\\r\\n        balanceOf[dst] = add(balanceOf[dst], wad);\\r\\n        emit Transfer(src, dst, wad);\\r\\n        return true;\\r\\n    }\\r\\n    function mint(address usr, uint wad) external auth {\\r\\n        balanceOf[usr] = add(balanceOf[usr], wad);\\r\\n        totalSupply = add(totalSupply, wad);\\r\\n        emit Transfer(address(0), usr, wad);\\r\\n    }\\r\\n    function burn(address usr, uint wad) external {\\r\\n        require(balanceOf[usr] >= wad, \\\"VAI/insufficient-balance\\\");\\r\\n        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\\r\\n            require(allowance[usr][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\r\\n            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\\r\\n        }\\r\\n        balanceOf[usr] = sub(balanceOf[usr], wad);\\r\\n        totalSupply = sub(totalSupply, wad);\\r\\n        emit Transfer(usr, address(0), wad);\\r\\n    }\\r\\n    function approve(address usr, uint wad) external returns (bool) {\\r\\n        allowance[msg.sender][usr] = wad;\\r\\n        emit Approval(msg.sender, usr, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // --- Alias ---\\r\\n    function push(address usr, uint wad) external {\\r\\n        transferFrom(msg.sender, usr, wad);\\r\\n    }\\r\\n    function pull(address usr, uint wad) external {\\r\\n        transferFrom(usr, msg.sender, wad);\\r\\n    }\\r\\n    function move(address src, address dst, uint wad) external {\\r\\n        transferFrom(src, dst, wad);\\r\\n    }\\r\\n\\r\\n    // --- Approve by signature ---\\r\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\\r\\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\\r\\n    {\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH,\\r\\n                                     holder,\\r\\n                                     spender,\\r\\n                                     nonce,\\r\\n                                     expiry,\\r\\n                                     allowed))\\r\\n        ));\\r\\n\\r\\n        require(holder != address(0), \\\"VAI/invalid-address-0\\\");\\r\\n        require(holder == ecrecover(digest, v, r, s), \\\"VAI/invalid-permit\\\");\\r\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"VAI/permit-expired\\\");\\r\\n        require(nonce == nonces[holder]++, \\\"VAI/invalid-nonce\\\");\\r\\n        uint wad = allowed ? uint(-1) : 0;\\r\\n        allowance[holder][spender] = wad;\\r\\n        emit Approval(holder, spender, wad);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb8312485f03bbc94201ac5cc4c07379959c03d47ad2e15de83832f6cc882151a\"},\"contracts/VAI/lib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract LibNote {\\r\\n    event LogNote(\\r\\n        bytes4   indexed  sig,\\r\\n        address  indexed  usr,\\r\\n        bytes32  indexed  arg1,\\r\\n        bytes32  indexed  arg2,\\r\\n        bytes             data\\r\\n    ) anonymous;\\r\\n\\r\\n    modifier note {\\r\\n        _;\\r\\n        assembly {\\r\\n            // log an 'anonymous' event with a constant 6 words of calldata\\r\\n            // and four indexed topics: selector, caller, arg1 and arg2\\r\\n            let mark := msize()                       // end of memory ensures zero\\r\\n            mstore(0x40, add(mark, 288))              // update free memory pointer\\r\\n            mstore(mark, 0x20)                        // bytes type data offset\\r\\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\\r\\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\\r\\n            log4(mark, 288,                           // calldata\\r\\n                 shl(224, shr(224, calldataload(0))), // msg.sig\\r\\n                 caller(),                            // msg.sender\\r\\n                 calldataload(4),                     // arg1\\r\\n                 calldataload(36)                     // arg2\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9664fcab8e6e944b2f5dd5424731e3a0d015df22b7c86467e5641732a1b71efd\"},\"contracts/VAIControllerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ncontract VAIControllerInterface {\\r\\n    function getVAIAddress() public view returns (address);\\r\\n    function getMintableVAI(address minter) public view returns (uint, uint);\\r\\n    function mintVAI(address minter, uint mintVAIAmount) external returns (uint);\\r\\n    function repayVAI(address repayer, uint repayVAIAmount) external returns (uint);\\r\\n    function liquidateVAI(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint, uint);\\r\\n\\r\\n    function _initializeVenusVAIState(uint blockNumber) external returns (uint);\\r\\n    function updateVenusVAIMintIndex() external returns (uint);\\r\\n    function calcDistributeVAIMinterVenus(address vaiMinter) external returns(uint, uint, uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x759d3b13b70ec2c4b190fe3c0bdb78c8557be4bfe49f0460a08f49cbf85e3627\"},\"contracts/VToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./VTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's VToken Contract\\r\\n * @notice Abstract base for VTokens\\r\\n * @author Venus\\r\\n */\\r\\ncontract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint err = _setComptroller(comptroller_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = uint(-1);\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        MathError mathErr;\\r\\n        uint allowanceNew;\\r\\n        uint srvTokensNew;\\r\\n        uint dstTokensNew;\\r\\n\\r\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\r\\n        }\\r\\n\\r\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srvTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != uint(-1)) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256) {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\r\\n        uint vTokenBalance = accountTokens[account];\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n\\r\\n        MathError mErr;\\r\\n\\r\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this vToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account) public view returns (uint) {\\r\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\r\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\r\\n        /* Note: we do not assert that the market is up to date */\\r\\n        MathError mathErr;\\r\\n        uint principalTimesIndex;\\r\\n        uint result;\\r\\n\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view returns (uint) {\\r\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\r\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\r\\n     */\\r\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\r\\n        uint _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint totalCash = getCashPrior();\\r\\n            uint cashPlusBorrowsMinusReserves;\\r\\n            Exp memory exchangeRate;\\r\\n            MathError mathErr;\\r\\n\\r\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this vToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view returns (uint) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public returns (uint) {\\r\\n        /* Remember the initial block number */\\r\\n        uint currentBlockNumber = getBlockNumber();\\r\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint cashPrior = getCashPrior();\\r\\n        uint borrowsPrior = totalBorrows;\\r\\n        uint reservesPrior = totalReserves;\\r\\n        uint borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\r\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\r\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor;\\r\\n        uint interestAccumulated;\\r\\n        uint totalBorrowsNew;\\r\\n        uint totalReservesNew;\\r\\n        uint borrowIndexNew;\\r\\n\\r\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        return mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    struct MintLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint mintTokens;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n        uint actualMintAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[minter] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), minter, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param receiver The address of the account which is receiving the vTokens\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param payer The address of the account which is paying the underlying token\\r\\n     * @param receiver The address of the account which is receiving vToken\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\r\\n        require(receiver != address(0), \\\"receiver is invalid\\\");\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[receiver] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a MintBehalf event, and a Transfer event */\\r\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    struct RedeemLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint redeemTokens;\\r\\n        uint redeemAmount;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems vTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\r\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\r\\n\\r\\n        RedeemLocalVars memory vars;\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            vars.redeemTokens = redeemTokensIn;\\r\\n\\r\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n\\r\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            vars.redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\r\\n         *  totalSupplyNew = totalSupply - redeemTokens\\r\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < vars.redeemAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n\\r\\n        uint feeAmount;\\r\\n        uint remainedAmount;\\r\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\r\\n            (vars.mathErr, feeAmount) = mulUInt(vars.redeemAmount, IComptroller(address(comptroller)).treasuryPercent());\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\\r\\n\\r\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\r\\n        } else {\\r\\n            remainedAmount = vars.redeemAmount;\\r\\n        }\\r\\n\\r\\n        doTransferOut(redeemer, remainedAmount);\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[redeemer] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\r\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return borrowFresh(msg.sender, borrowAmount);\\r\\n    }\\r\\n\\r\\n    struct BorrowLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Users borrow assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        BorrowLocalVars memory vars;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    struct RepayBorrowLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint repayAmount;\\r\\n        uint borrowerIndex;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n        uint actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of undelrying tokens being returned\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        RepayBorrowLocalVars memory vars;\\r\\n\\r\\n        /* We remember the original borrowerIndex for verification purposes */\\r\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            vars.repayAmount = vars.accountBorrows;\\r\\n        } else {\\r\\n            vars.repayAmount = repayAmount;\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this vToken to be liquidated\\r\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        error = vTokenCollateral.accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this vToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, VTokenInterface vTokenCollateral) internal returns (uint, uint) {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(vTokenCollateral), liquidator, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify vTokenCollateral market's block number equals current block number */\\r\\n        if (vTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\r\\n        }\\r\\n\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\r\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\r\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(vTokenCollateral), actualRepayAmount);\\r\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        uint seizeError;\\r\\n        if (address(vTokenCollateral) == address(this)) {\\r\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\r\\n        }\\r\\n\\r\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\r\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.liquidateBorrowVerify(address(this), address(vTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of vTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\r\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another VToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of vTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\r\\n        }\\r\\n\\r\\n        MathError mathErr;\\r\\n        uint borrowerTokensNew;\\r\\n        uint liquidatorTokensNew;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountTokens[borrower] = borrowerTokensNew;\\r\\n        accountTokens[liquidator] = liquidatorTokensNew;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() external returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new comptroller for the market\\r\\n      * @dev Admin function to set a new comptroller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n      * @dev Admin function to accrue interest and set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\r\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n      * @dev Admin function to set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\r\\n        }\\r\\n\\r\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and adds reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        (error, ) = _addReservesFresh(addAmount);\\r\\n        return error;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint totalReservesNew;\\r\\n        uint actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        /* Revert on overflow */\\r\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\r\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\r\\n\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) internal;\\r\\n\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0802fab87bdb58d9f7e64ba14d9f7b574563fc5a4a0241bd5400ecec11a31c75\"},\"contracts/VTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\ncontract VTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n     */\\r\\n\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\r\\n     */\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-vToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\r\\n     */\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @notice Official record of token balances for each account\\r\\n     */\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    /**\\r\\n     * @notice Approved token transfer amounts on behalf of others\\r\\n     */\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of account addresses to outstanding borrow balances\\r\\n     */\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n}\\r\\n\\r\\ncontract VTokenInterface is VTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a VToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isVToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\r\\n     */\\r\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed and fee are transferred\\r\\n     */\\r\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address vTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Failure event\\r\\n     */\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) public view returns (uint);\\r\\n    function exchangeRateCurrent() public returns (uint);\\r\\n    function exchangeRateStored() public view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() public returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\r\\n    function _acceptAdmin() external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\r\\n}\\r\\n\\r\\ncontract VBep20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this VToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\ncontract VBep20Interface is VBep20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function borrow(uint borrowAmount) external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) external returns (uint);\\r\\n}\\r\\n\\r\\ncontract VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\ncontract VDelegatorInterface is VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\r\\n}\\r\\n\\r\\ncontract VDelegateInterface is VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) public;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() public;\\r\\n}\\r\\n\",\"keccak256\":\"0x68a15b12e14ff01a6ee8eb00129e0087d6d65df008631b2a05ca500f56fe68b9\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055615f3e80620000336000396000f3fe608060405234801561001057600080fd5b50600436106105195760003560e01c806386df31ee116102a4578063bf32442d11610172578063ddfd287e116100d9578063ede4edd011610092578063ede4edd014611647578063ededbae61461166d578063f519fc3014611675578063f851a4401461169b578063fa6331d8146116a3578063fd51a3ad146116ab57610519565b8063ddfd287e14611580578063e37d4b7914611588578063e4028eee146115ae578063e85a2960146115da578063e875544614611609578063eabe7d911461161157610519565b8063d09c54ba1161012b578063d09c54ba146113ac578063d24febad146114d8578063d3270f991461150e578063da3d454c14611516578063dce154491461154c578063dcfbc0c71461157857610519565b8063bf32442d1461128e578063c299823814611296578063c488847b14611304578063c5b4db551461133a578063c5f956af1461135e578063d02f73511461136657610519565b8063a7604b4111610216578063b2eafc39116101cf578063b2eafc39146111c6578063b8324c7c146111ce578063bb82aa5e1461121c578063bb85745014611224578063bdcdc2581461124a578063bec04f721461128657610519565b8063a7604b411461108b578063a76b3fda146110b7578063a78dc775146110dd578063abfceffc14611122578063adcd5fb914611198578063b0772d0b146111be57610519565b8063929fe9a111610268578063929fe9a114610fd557806394b2294b146110035780639bb27d621461100b5780639bf34cbb146110135780639cfdd9e614611039578063a06a87f11461105f57610519565b806386df31ee14610ea6578063879c2e1d14610f575780638a7dc16514610f5f5780638e8f294b14610f855780639254f5e514610fcd57610519565b80634a584432116103ec5780635f5af1aa1161035357806370bf66f01161030c57806370bf66f014610d2c578063719f701b14610e605780637655138314610e685780637858524d14610e705780637d172bd514610e965780637dc0d1d014610e9e57610519565b80635f5af1aa14610b635780635fc7e71e14610b89578063607ef6c114610bcf5780636662c7c914610c8d5780636a56947e14610caa5780636d35bf9114610ce657610519565b806351a485e4116103a557806351a485e4146109ca57806351dff98914610a8857806352d84d1e14610ac457806355ee1fe114610ae15780635c77860514610b075780635ec88c7914610b3d57610519565b80634a584432146108bd5780634ada90af146108e35780634e0853db146108eb5780634e79238f1461091d5780634ef4c3e1146109775780634fd42e17146109ad57610519565b806326782247116104905780634088c73e116104495780634088c73e146107ef57806341a18d2c146107f757806341c728b914610825578063425fad581461086157806342cbb15c1461086957806347ef3b3b1461087157610519565b806326782247146106a85780632a6a6065146106b05780632b5d790c146106cf5780632bc7e29e1461078f5780632ec04124146107b5578063317b0b77146107d257610519565b80631abcaa77116104e25780631abcaa77146105b05780631d504dc6146105d65780631ededc91146105fe57806321af45691461064057806324008a621461066457806324a3d622146106a057610519565b80627e3dd21461051e57806302c3bcbb1461053a57806304ef9d581461057257806308e0225c1461057a5780630db4b4e5146105a8575b600080fd5b6105266116d7565b604080519115158252519081900360200190f35b6105606004803603602081101561055057600080fd5b50356001600160a01b03166116dc565b60408051918252519081900360200190f35b6105606116ee565b6105606004803603604081101561059057600080fd5b506001600160a01b03813581169160200135166116f4565b610560611711565b610560600480360360208110156105c657600080fd5b50356001600160a01b0316611717565b6105fc600480360360208110156105ec57600080fd5b50356001600160a01b0316611729565b005b6105fc600480360360a081101561061457600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135611897565b61064861189e565b604080516001600160a01b039092168252519081900360200190f35b6105606004803603608081101561067a57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356118ad565b610648611982565b610648611991565b610526600480360360208110156106c657600080fd5b503515156119a0565b6105fc600480360360608110156106e557600080fd5b810190602081018135600160201b8111156106ff57600080fd5b82018360208201111561071157600080fd5b803590602001918460208302840111600160201b8311171561073257600080fd5b919390929091602081019035600160201b81111561074f57600080fd5b82018360208201111561076157600080fd5b803590602001918460208302840111600160201b8311171561078257600080fd5b9193509150351515611a36565b610560600480360360208110156107a557600080fd5b50356001600160a01b0316611ad2565b610560600480360360208110156107cb57600080fd5b5035611ae4565b610560600480360360208110156107e857600080fd5b5035611b3b565b610526611b8f565b6105606004803603604081101561080d57600080fd5b506001600160a01b0381358116916020013516611b98565b6105fc6004803603608081101561083b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611bb5565b610526611bbb565b610560611bca565b6105fc600480360360c081101561088757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135611bcf565b610560600480360360208110156108d357600080fd5b50356001600160a01b0316611bd7565b610560611be9565b6105fc6004803603606081101561090157600080fd5b506001600160a01b038135169060208101359060400135611bef565b6109596004803603608081101561093357600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611c6d565b60408051938452602084019290925282820152519081900360600190f35b6105606004803603606081101561098d57600080fd5b506001600160a01b03813581169160208101359091169060400135611ca3565b610560600480360360208110156109c357600080fd5b5035611ea7565b6105fc600480360360408110156109e057600080fd5b810190602081018135600160201b8111156109fa57600080fd5b820183602082011115610a0c57600080fd5b803590602001918460208302840111600160201b83111715610a2d57600080fd5b919390929091602081019035600160201b811115610a4a57600080fd5b820183602082011115610a5c57600080fd5b803590602001918460208302840111600160201b83111715610a7d57600080fd5b509092509050611f71565b6105fc60048036036080811015610a9e57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356120c4565b61064860048036036020811015610ada57600080fd5b5035612115565b61056060048036036020811015610af757600080fd5b50356001600160a01b031661213c565b6105fc60048036036060811015610b1d57600080fd5b506001600160a01b038135811691602081013590911690604001356121b5565b61095960048036036020811015610b5357600080fd5b50356001600160a01b03166121ba565b61056060048036036020811015610b7957600080fd5b50356001600160a01b03166121ef565b610560600480360360a0811015610b9f57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135612268565b6105fc60048036036040811015610be557600080fd5b810190602081018135600160201b811115610bff57600080fd5b820183602082011115610c1157600080fd5b803590602001918460208302840111600160201b83111715610c3257600080fd5b919390929091602081019035600160201b811115610c4f57600080fd5b820183602082011115610c6157600080fd5b803590602001918460208302840111600160201b83111715610c8257600080fd5b509092509050612459565b6105fc60048036036020811015610ca357600080fd5b50356125a3565b6105fc60048036036080811015610cc057600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356125f2565b6105fc600480360360a0811015610cfc57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611897565b6105fc600480360360a0811015610d4257600080fd5b810190602081018135600160201b811115610d5c57600080fd5b820183602082011115610d6e57600080fd5b803590602001918460208302840111600160201b83111715610d8f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610dde57600080fd5b820183602082011115610df057600080fd5b803590602001918460208302840111600160201b83111715610e1157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050505080351515915060208101351515906040013515156125f7565b6105606127e4565b6105266127ea565b6105fc60048036036020811015610e8657600080fd5b50356001600160a01b03166127f8565b6106486128b5565b6106486128c4565b6105fc60048036036040811015610ebc57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ee657600080fd5b820183602082011115610ef857600080fd5b803590602001918460208302840111600160201b83111715610f1957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506128d3945050505050565b610560612930565b61056060048036036020811015610f7557600080fd5b50356001600160a01b0316612936565b610fab60048036036020811015610f9b57600080fd5b50356001600160a01b0316612948565b6040805193151584526020840192909252151582820152519081900360600190f35b61064861296e565b61052660048036036040811015610feb57600080fd5b506001600160a01b038135811691602001351661297d565b6105606129b1565b6106486129b7565b6105606004803603602081101561102957600080fd5b50356001600160a01b03166129c6565b6105606004803603602081101561104f57600080fd5b50356001600160a01b0316612a3e565b6105fc6004803603604081101561107557600080fd5b506001600160a01b038135169060200135612ab7565b6105fc600480360360408110156110a157600080fd5b506001600160a01b038135169060200135612adf565b610560600480360360208110156110cd57600080fd5b50356001600160a01b0316612ba1565b611109600480360360408110156110f357600080fd5b506001600160a01b038135169060200135612d26565b6040805192835260208301919091528051918290030190f35b6111486004803603602081101561113857600080fd5b50356001600160a01b0316612dc5565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561118457818101518382015260200161116c565b505050509050019250505060405180910390f35b6105fc600480360360208110156111ae57600080fd5b50356001600160a01b0316612e3b565b611148612e9f565b610648612f01565b6111f4600480360360208110156111e457600080fd5b50356001600160a01b0316612f10565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b610648612f3a565b6105fc6004803603602081101561123a57600080fd5b50356001600160a01b0316612f49565b6105606004803603608081101561126057600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612fb4565b610560613002565b610648613008565b611148600480360360208110156112ac57600080fd5b810190602081018135600160201b8111156112c657600080fd5b8201836020820111156112d857600080fd5b803590602001918460208302840111600160201b831117156112f957600080fd5b509092509050613020565b6111096004803603606081101561131a57600080fd5b506001600160a01b038135811691602081013590911690604001356130b6565b61134261315e565b604080516001600160e01b039092168252519081900360200190f35b610648613171565b610560600480360360a081101561137c57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135613180565b6105fc600480360360808110156113c257600080fd5b810190602081018135600160201b8111156113dc57600080fd5b8201836020820111156113ee57600080fd5b803590602001918460208302840111600160201b8311171561140f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561145e57600080fd5b82018360208201111561147057600080fd5b803590602001918460208302840111600160201b8311171561149157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050508035151591506020013515156132ff565b610560600480360360608110156114ee57600080fd5b506001600160a01b0381358116916020810135909116906040013561330d565b610648613498565b6105606004803603606081101561152c57600080fd5b506001600160a01b038135811691602081013590911690604001356134a7565b6106486004803603604081101561156257600080fd5b506001600160a01b0381351690602001356137f1565b610648613826565b6105fc613835565b6111f46004803603602081101561159e57600080fd5b50356001600160a01b0316613a65565b610560600480360360408110156115c457600080fd5b506001600160a01b038135169060200135613a8f565b610526600480360360408110156115f057600080fd5b5080356001600160a01b0316906020013560ff16613c31565b610560613c71565b6105606004803603606081101561162757600080fd5b506001600160a01b03813581169160208101359091169060400135613c77565b6105606004803603602081101561165d57600080fd5b50356001600160a01b0316613cc6565b610648613f7d565b6105606004803603602081101561168b57600080fd5b50356001600160a01b0316613f95565b61064861400d565b61056061401c565b610560600480360360408110156116c157600080fd5b506001600160a01b038135169060200135614022565b600181565b60276020526000908152604090205481565b60225481565b601360209081526000928352604080842090915290825290205481565b601d5481565b600f6020526000908152604090205481565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d602081101561178c57600080fd5b50516001600160a01b031633146117ea576040805162461bcd60e51b815260206004820152601960248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e00000000000000604482015290519081900360640190fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561182557600080fd5b505af1158015611839573d6000803e3d6000fd5b505050506040513d602081101561184f57600080fd5b505115611894576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b50565b5050505050565b601e546001600160a01b031681565b60006118b76140cf565b6118c2856003614122565b6001600160a01b03851660009081526009602052604090206118e390614171565b6118eb615d6e565b6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d602081101561195957600080fd5b50519052905061196986826141bb565b61197486858361444f565b60009150505b949350505050565b600a546001600160a01b031681565b6001546001600160a01b031681565b60006119e06040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250614632565b6018805483151562010000810262ff0000199092169190911790915560408051918252517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b389181900360200190a150805b919050565b611a576040518060600160405280602b8152602001615e78602b9139614632565b838260005b82811015611ac85760005b82811015611abf57611ab7898984818110611a7e57fe5b905060200201356001600160a01b0316888884818110611a9a57fe5b90506020020135600881118015611ab057600080fd5b5087614753565b600101611a67565b50600101611a5c565b5050505050505050565b60166020526000908152604090205481565b6000611aee61480b565b6017805490839055604080518281526020810185905281517f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a4929181900390910190a160005b9392505050565b6000611b4561480b565b6005805490839055604080518281526020810185905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a16000611b34565b60185460ff1681565b601260209081526000928352604080842090915290825290205481565b50505050565b60185462010000900460ff1681565b435b90565b505050505050565b601f6020526000908152604090205481565b60065481565b611bf761480b565b611c008361485b565b601b80546001600160a01b0385166001600160a01b03199091168117909155601c839055601d8290556040805191825260208201849052818101839052517f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e9181900360600190a1505050565b600080600080600080611c828a8a8a8a6148ae565b925092509250826012811115611c9457fe5b9a919950975095505050505050565b6000611cad6140cf565b611cb8846000614122565b6001600160a01b0384166000908152600960205260409020611cd990614171565b6001600160a01b03841660009081526027602052604090205480611d3d576040805162461bcd60e51b815260206004820152601660248201527506d61726b657420737570706c792063617020697320360541b604482015290519081900360640190fd5b6000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d6020811015611da257600080fd5b50519050611dae615d6e565b6040518060200160405280886001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d6020811015611e1c57600080fd5b5051905290506000611e2f82848861496d565b905083811115611e86576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015290519081900360640190fd5b611e8f88614995565b611e998888614c1f565b506000979650505050505050565b6000611eca604051806060016040528060218152602001615ddb60219139614632565b670de0b6b3a7640000821015611f27576040805162461bcd60e51b815260206004820152601b60248201527f696e63656e74697665206d757374206265206f76657220316531380000000000604482015290519081900360640190fd5b6006805490839055604080518281526020810185905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611b34565b611f92604051806060016040528060298152602001615dfc60299139614632565b82818115801590611fa257508082145b611fe3576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156120bb57848482818110611ffa57fe5b905060200201356027600089898581811061201157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061205157fe5b905060200201356001600160a01b03166001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061209757fe5b905060200201356040518082815260200191505060405180910390a2600101611fe6565b50505050505050565b801515806120d0575081155b611bb5576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b600d818154811061212257fe5b6000918252602090912001546001600160a01b0316905081565b600061214661480b565b61214f8261485b565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a16000611b34565b505050565b6000806000806000806121d18760008060006148ae565b9250925092508260128111156121e357fe5b97919650945092505050565b60006121f961480b565b6122028261485b565b600a80546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e929181900390910190a16000611b34565b60006122726140cf565b61227d866005614122565b6025546001600160a01b0316158015906122a557506025546001600160a01b03858116911614155b156122b45760015b9050612450565b6001600160a01b03851660009081526009602052604090206122d590614171565b6015546001600160a01b0387811691161461230b576001600160a01b038616600090815260096020526040902061230b90614171565b60008061231c8560008060006148ae565b9193509091506000905082601281111561233257fe5b1461234c5781601281111561234357fe5b92505050612450565b80612358576003612343565b6015546000906001600160a01b038a81169116146123f957886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b50519050612414565b506001600160a01b0385166000908152601660205260409020545b6000612430604051806020016040528060055481525083614e4a565b905080861115612447576011945050505050612450565b60009450505050505b95945050505050565b61247a604051806060016040528060298152602001615e2560299139614632565b8281811580159061248a57508082145b6124cb576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156120bb578484828181106124e257fe5b90506020020135601f60008989858181106124f957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061253957fe5b905060200201356001600160a01b03166001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f686868481811061257f57fe5b905060200201356040518082815260200191505060405180910390a26001016124ce565b6125ab61480b565b601a805490829055604080518281526020810184905281517fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b929181900390910190a15050565b611bb5565b6000805b855181101561275c57600086828151811061261257fe5b6020026020010151905061264960096000836001600160a01b03166001600160a01b03168152602001908152602001600020614171565b851561270e57612657615d6e565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b5051905290506126d582826141bb565b600093505b885184101561270c57612701828a86815181106126f357fe5b60200260200101518361444f565b6001909301926126da565b505b84156127535761271d81614995565b600092505b8751831015612753576127488189858151811061273b57fe5b6020026020010151614c1f565b600190920191612722565b506001016125fb565b50600090505b8551811015611bcf57600086828151811061277957fe5b6020026020010151905060006127938260008060006148ae565b6001600160a01b0385166000908152601460205260409020549093506127be92508491508387614e69565b6001600160a01b0390921660009081526014602052604090209190915550600101612762565b601c5481565b601854610100900460ff1681565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811061282857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506128b181600d8054806020026020016040519081016040528092919081815260200182805480156128a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612884575b505050505060018060016125f7565b5050565b601b546001600160a01b031681565b6004546001600160a01b031681565b60408051600180825281830190925260609160208083019080388339019050509050828160008151811061290357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506121b581836001806132ff565b600e5481565b60146020526000908152604090205481565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b6015546001600160a01b031681565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff165b92915050565b60075481565b6025546001600160a01b031681565b60006129d061480b565b6129d98261485b565b602680546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a9281900390910190a16000611b34565b6000612a4861480b565b612a518261485b565b601580546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b2929181900390910190a16000611b34565b600254612acc906001600160a01b0316615228565b612ad58261485b565b6128b1828261528a565b600254612af4906001600160a01b0316615228565b6000612b038383600080614e69565b90508015612b58576040805162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e742078767320666f72206772616e74000000000000604482015290519081900360640190fd5b604080516001600160a01b03851681526020810184905281517fd7fe674cac9eee3998fe3cbd7a6f93c3bc70509d97ec1550a59364be6438147e929181900390910190a1505050565b6000612be16040518060400160405280601781526020017f5f737570706f72744d61726b6574286164647265737329000000000000000000815250614632565b6001600160a01b03821660009081526009602052604090205460ff1615612c1557612c0e600a60116155c8565b9050611a31565b816001600160a01b0316633d9ea3a16040518163ffffffff1660e01b815260040160206040518083038186803b158015612c4e57600080fd5b505afa158015612c62573d6000803e3d6000fd5b505050506040513d6020811015612c7857600080fd5b5050604080516060810182526001808252600060208381018281528486018381526001600160a01b03891684526009909252949091209251835490151560ff19918216178455935191830191909155516003909101805491151591909216179055612ce28261562e565b604080516001600160a01b038416815290517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9181900360200190a1600092915050565b602654604080516304f65f8b60e21b81523060048201526001600160a01b038581166024830152604482018590528251600094859485948594909216926313d97e2c926064808201939291829003018186803b158015612d8557600080fd5b505afa158015612d99573d6000803e3d6000fd5b505050506040513d6040811015612daf57600080fd5b5080516020909101519097909650945050505050565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015612e2f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e11575b50505050509050919050565b61189481600d805480602002602001604051908101604052809291908181526020018280548015612e9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e77575b50505050506128d3565b6060600d805480602002602001604051908101604052809291908181526020018280548015612ef757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ed9575b5050505050905090565b6020546001600160a01b031681565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6002546001600160a01b031681565b612f5161480b565b602580546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac1929181900390910190a15050565b6000612fbe6140cf565b612fc9856006614122565b6000612fd686868561570c565b90508015612fe557905061197a565b612fee86614995565b612ff88686614c1f565b6119748685614c1f565b60175481565b73cf6bb5389c92bdda8a3747ddb454cb7a64626c6390565b60408051828152602080840282010190915260609082908290828015613050578160200160208202803883390190505b50905060005b828110156130ad5761308386868381811061306d57fe5b905060200201356001600160a01b0316336157b2565b601281111561308e57fe5b82828151811061309a57fe5b6020908102919091010152600101613056565b50949350505050565b60265460408051630779996560e11b81523060048201526001600160a01b038681166024830152858116604483015260648201859052825160009485948594859490921692630ef332ca926084808201939291829003018186803b15801561311d57600080fd5b505afa158015613131573d6000803e3d6000fd5b505050506040513d604081101561314757600080fd5b508051602090910151909890975095505050505050565b6ec097ce7bc90715b34b9f100000000081565b6021546001600160a01b031681565b600061318a6140cf565b613195866004614122565b6001600160a01b03861660009081526009602052604090206131b690614171565b6015546001600160a01b038681169116146131ec576001600160a01b03851660009081526009602052604090206131ec90614171565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561322557600080fd5b505afa158015613239573d6000803e3d6000fd5b505050506040513d602081101561324f57600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b15801561329557600080fd5b505afa1580156132a9573d6000803e3d6000fd5b505050506040513d60208110156132bf57600080fd5b50516001600160a01b0316146132d65760026122ad565b6132df86614995565b6132e98684614c1f565b6132f38685614c1f565b60009695505050505050565b611bb58484848460006125f7565b602054600090613325906001600160a01b0316615228565b670de0b6b3a76400008210613381576040805162461bcd60e51b815260206004820152601d60248201527f74726561737572792070657263656e7420636170206f766572666c6f77000000604482015290519081900360640190fd5b61338a8461485b565b6133938361485b565b6020805460218054602280546001600160a01b038a81166001600160a01b0319808816821789558b8316908616179095559188905560408051958316808752968601949094528351929091169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a16000979650505050505050565b6026546001600160a01b031681565b60006134b16140cf565b6134bc846002614122565b6001600160a01b03841660009081526009602052604090206134dd90614171565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661359a57336001600160a01b03851614613563576040805162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba103132903b2a37b5b2b760591b604482015290519081900360640190fd5b600061356f85856157b2565b9050600081601281111561357f57fe5b146135985780601281111561359057fe5b915050611b34565b505b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b1580156135eb57600080fd5b505afa1580156135ff573d6000803e3d6000fd5b505050506040513d602081101561361557600080fd5b505161362557600d5b9050611b34565b6001600160a01b0384166000908152601f60205260409020548015613712576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561367f57600080fd5b505afa158015613693573d6000803e3d6000fd5b505050506040513d60208110156136a957600080fd5b5051905060006136b982866158a6565b905082811061370f576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015290519081900360640190fd5b50505b60008061372286886000886148ae565b9193509091506000905082601281111561373857fe5b146137535781601281111561374957fe5b9350505050611b34565b8015613760576004613749565b613768615d6e565b6040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ac57600080fd5b505afa1580156137c0573d6000803e3d6000fd5b505050506040513d60208110156137d657600080fd5b5051905290506137e688826141bb565b611e9988888361444f565b6008602052816000526040600020818154811061380a57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b601c54158061384c5750601c5461384a611bca565b105b1561385657613a63565b6000613860613008565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156138ac57600080fd5b505afa1580156138c0573d6000803e3d6000fd5b505050506040513d60208110156138d657600080fd5b50519050806138e6575050613a63565b6000806138fc6138f4611bca565b601c546158dc565b9050600061390c601a5483615916565b905080841061391d57809250613921565b8392505b601d54831015613935575050505050613a63565b61393d611bca565b601c55601b546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810186905290519187169163a9059cbb916044808201926020929091908290030181600087803b15801561399657600080fd5b505af11580156139aa573d6000803e3d6000fd5b505050506040513d60208110156139c057600080fd5b50506040805184815290517ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9181900360200190a1601b60009054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613a4557600080fd5b505af1158015613a59573d6000803e3d6000fd5b5050505050505050505b565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6000613ab2604051806060016040528060258152602001615ee560259139614632565b613abb8361485b565b6001600160a01b0383166000908152600960205260409020613adc81614171565b613ae4615d6e565b506040805160208101909152838152613afb615d6e565b506040805160208101909152670c7d713b49da00008152613b1c8183615958565b15613b3757613b2d600660086155c8565b93505050506129ab565b8415801590613bc05750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015613b9257600080fd5b505afa158015613ba6573d6000803e3d6000fd5b505050506040513d6020811015613bbc57600080fd5b5051155b15613bd157613b2d600d60096155c8565b60018301805490869055604080516001600160a01b03891681526020810183905280820188905290517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a16000979650505050505050565b6001600160a01b038216600090815260296020526040812081836008811115613c5657fe5b815260208101919091526040016000205460ff169392505050565b60055481565b6000613c816140cf565b613c8c846001614122565b6000613c9985858561570c565b90508015613ca8579050611b34565b613cb185614995565b613cbb8585614c1f565b600095945050505050565b6000613cd3826008614122565b604080516361bfb47160e11b815233600482015290518391600091829182916001600160a01b0386169163c37f68e2916024808301926080929190829003018186803b158015613d2257600080fd5b505afa158015613d36573d6000803e3d6000fd5b505050506040513d6080811015613d4c57600080fd5b508051602082015160409092015190945090925090508215613db5576040805162461bcd60e51b815260206004820152601960248201527f6765744163636f756e74536e617073686f74206661696c656400000000000000604482015290519081900360640190fd5b8015613dd257613dc7600c60026155c8565b945050505050611a31565b6000613ddf87338561570c565b90508015613e0057613df4600e60038361595f565b95505050505050611a31565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff16613e3f5760009650505050505050611a31565b3360009081526002820160209081526040808320805460ff1916905560089091528120805490915b81811015613f2057886001600160a01b0316838281548110613e8557fe5b6000918252602090912001546001600160a01b03161415613f1857826001830381548110613eaf57fe5b9060005260206000200160009054906101000a90046001600160a01b0316838281548110613ed957fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558254613f12846000198301615d81565b50613f20565b600101613e67565b818110613f2957fe5b604080516001600160a01b038b16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009b9a5050505050505050505050565b73151b1e2635a717bcdc836ecd6fbb62b674fe3e1d90565b6000613f9f61480b565b613fa88261485b565b602880546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd49281900390910190a16000611b34565b6000546001600160a01b031681565b601a5481565b600061402c6140cf565b60185460ff161580156140475750601854610100900460ff16155b614088576040805162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b604482015290519081900360640190fd5b6015546001600160a01b031633146140ad576140a6600e60166155c8565b90506129ab565b6001600160a01b03831660009081526016602052604081208390559392505050565b60185462010000900460ff1615613a63576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b61412c8282613c31565b156128b1576040805162461bcd60e51b815260206004820152601060248201526f1858dd1a5bdb881a5cc81c185d5cd95960821b604482015290519081900360640190fd5b805460ff16611894576040805162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015290519081900360640190fd5b6001600160a01b0382166000908152601160209081526040808320600f90925282205490916141e8611bca565b8354909150600090614208908390600160e01b900463ffffffff166158dc565b905060008111801561421a5750600083115b156143ea57600061428f876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561425d57600080fd5b505afa158015614271573d6000803e3d6000fd5b505050506040513d602081101561428757600080fd5b5051876159c5565b9050600061429d8386615916565b90506142a7615d6e565b600083116142c457604051806020016040528060008152506142ce565b6142ce82846159e3565b90506142d8615d6e565b604080516020810190915288546001600160e01b031681526142fa9083615a21565b905060405180604001604052806143408360000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250615a46565b6001600160e01b031681526020016143868860405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b63ffffffff9081169091526001600160a01b038c166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b0319909416939093171691909117905550611bcf92505050565b8015611bcf576144288260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b601b546001600160a01b03161561446857614468613835565b614470615da5565b506001600160a01b0383166000908152601160209081526040918290208251808401909352546001600160e01b0381168352600160e01b900463ffffffff16908201526144bb615d6e565b50604080516020810190915281516001600160e01b031681526144dc615d6e565b5060408051602080820183526001600160a01b0380891660009081526013835284812091891680825282845294812080548552865195909152915291909155805115611bcf5761452a615d6e565b6145348383615b35565b90506000614591886001600160a01b03166395dd9193896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561425d57600080fd5b9050600061459f8284615b5a565b6001600160a01b038916600090815260146020526040812054919250906145c690836158a6565b6001600160a01b03808b166000818152601460209081526040918290208590558a5182518881529182015281519495509193928e16927f837bdc11fca9f17ce44167944475225a205279b17e88c791c3b1f66f354668fb9281900390910190a350505050505050505050565b602854604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b8381101561469b578181015183820152602001614683565b50505050905090810190601f1680156146c85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156146e657600080fd5b505afa1580156146fa573d6000803e3d6000fd5b505050506040513d602081101561471057600080fd5b5051611894576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6001600160a01b038316600090815260096020526040902061477490614171565b6001600160a01b0383166000908152602960205260408120829184600881111561479a57fe5b81526020810191909152604001600020805460ff19169115159190911790558160088111156147c557fe5b60408051831515815290516001600160a01b038616917f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d919081900360200190a3505050565b6000546001600160a01b03163314613a63576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b038116611894576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b6026546040805163a7032efb60e01b81523060048201526001600160a01b03878116602483015286811660448301526064820186905260848201859052915160009384938493849384938493169163a7032efb9160a4808301926060929190829003018186803b15801561492157600080fd5b505afa158015614935573d6000803e3d6000fd5b505050506040513d606081101561494b57600080fd5b50805160208201516040909201519094509092509050826012811115611c9457fe5b6000614977615d6e565b6149818585615b89565b905061245061498f82615baa565b846158a6565b6001600160a01b0381166000908152601060209081526040808320600f90925282205490916149c2611bca565b83549091506000906149e2908390600160e01b900463ffffffff166158dc565b90506000811180156149f45750600083115b15614bbb576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a3457600080fd5b505afa158015614a48573d6000803e3d6000fd5b505050506040513d6020811015614a5e57600080fd5b505190506000614a6e8386615916565b9050614a78615d6e565b60008311614a955760405180602001604052806000815250614a9f565b614a9f82846159e3565b9050614aa9615d6e565b604080516020810190915288546001600160e01b03168152614acb9083615a21565b90506040518060400160405280614b118360000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250615a46565b6001600160e01b03168152602001614b578860405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b63ffffffff9081169091526001600160a01b038b166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061189792505050565b801561189757614bf98260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b845463ffffffff91909116600160e01b026001600160e01b039091161784555050505050565b601b546001600160a01b031615614c3857614c38613835565b614c40615da5565b506001600160a01b0382166000908152601060209081526040918290208251808401909352546001600160e01b0381168352600160e01b900463ffffffff1690820152614c8b615d6e565b50604080516020810190915281516001600160e01b03168152614cac615d6e565b5060408051602080820183526001600160a01b03808816600090815260128352848120918816808252828452948120805485528651959091529152919091558051158015614cfa5750815115155b15614d12576ec097ce7bc90715b34b9f100000000081525b614d1a615d6e565b614d248383615b35565b90506000866001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d6020811015614da857600080fd5b505190506000614db88284615b5a565b6001600160a01b03881660009081526014602052604081205491925090614ddf90836158a6565b6001600160a01b03808a166000818152601460209081526040918290208590558a5182518881529182015281519495509193928d16927ffa9d964d891991c113b49e3db1932abd6c67263d387119707aafdd6c4010a3a99281900390910190a3505050505050505050565b6000614e54615d6e565b614e5e8484615b89565b905061197a81615baa565b600073ef044206db68e40520bfa82d45419d498b4bc7bf6001600160a01b03861614801590614eb55750737589dd3355dae848fdbf75044a3495351655cb1a6001600160a01b03861614155b8015614ede57507333df7a7f6d44307e1e5f3b15975b47515e5524c06001600160a01b03861614155b8015614f0757507324e77e5b74b30b026e9996e4bc3329c881e249686001600160a01b03861614155b614f46576040805162461bcd60e51b815260206004820152600b60248201526a109b1858dadb1a5cdd195960aa1b604482015290519081900360640190fd5b6000614f50613008565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015614f9c57600080fd5b505afa158015614fb0573d6000803e3d6000fd5b505050506040513d6020811015614fc657600080fd5b50519050841515861580614fd957508187115b15614fe95786935050505061197a565b8061508757826001600160a01b031663a9059cbb89896040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561504e57600080fd5b505af1158015615062573d6000803e3d6000fd5b505050506040513d602081101561507857600080fd5b506000945061197a9350505050565b846150c35760405162461bcd60e51b8152600401808060200182810382526042815260200180615ea36042913960600191505060405180910390fd5b826001600160a01b031663095ea7b36150da613f7d565b896040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561512a57600080fd5b505af115801561513e573d6000803e3d6000fd5b505050506040513d602081101561515457600080fd5b5060009050615161613f7d565b6001600160a01b03166323323e038a8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156151c057600080fd5b505af11580156151d4573d6000803e3d6000fd5b505050506040513d60208110156151ea57600080fd5b505114611e995760405162461bcd60e51b815260040180806020018281038252602a815260200180615e4e602a913960400191505060405180910390fd5b6000546001600160a01b03163314806152495750336001600160a01b038216145b611894576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6001600160a01b0382166000908152600f6020526040902054801561533e576152b1615d6e565b6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156152f557600080fd5b505afa158015615309573d6000803e3d6000fd5b505050506040513d602081101561531f57600080fd5b50519052905061532e84614995565b61533884826141bb565b5061556c565b811561556c576001600160a01b038316600090815260096020526040902061536590614171565b6001600160a01b0383166000908152601060205260409020546001600160e01b03161580156153b757506001600160a01b038316600090815260106020526040902054600160e01b900463ffffffff16155b156154865760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b0316815260200161542b6153f0611bca565b6040518060400160405280601c81526020017f626c6f636b206e756d6265722065786365656473203332206269747300000000815250615ae0565b63ffffffff9081169091526001600160a01b0385166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b6001600160a01b0383166000908152601160205260409020546001600160e01b03161580156154d857506001600160a01b038316600090815260116020526040902054600160e01b900463ffffffff16155b1561556c5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b031681526020016155116153f0611bca565b63ffffffff9081169091526001600160a01b0385166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b8181146121b5576001600160a01b0383166000818152600f6020908152604091829020859055815185815291517f2a0ce45ba05a83e75ba21e1a10d6b48a8395028cc6e1ae66f6c313648379d5489281900390910190a2505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360128111156155f757fe5b83601781111561560357fe5b604080519283526020830191909152600082820152519081900360600190a1826012811115611b3457fe5b60005b600d548110156156b957816001600160a01b0316600d828154811061565257fe5b6000918252602090912001546001600160a01b031614156156b1576040805162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015290519081900360640190fd5b600101615631565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316600090815260096020526040812061572d90614171565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661576557600061361e565b60008061577585878660006148ae565b9193509091506000905082601281111561578b57fe5b146157a55781601281111561579c57fe5b92505050611b34565b80156132f357600461579c565b60006157bf836007614122565b6001600160a01b03831660009081526009602052604090206157e081614171565b6001600160a01b038316600090815260028201602052604090205460ff161561580d5760009150506129ab565b6001600160a01b0380841660008181526002840160209081526040808320805460ff19166001908117909155600883528184208054918201815584529282902090920180549489166001600160a01b031990951685179055815193845283019190915280517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59281900390910190a15060009392505050565b6000611b348383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250615bb9565b6000611b348383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250615c0e565b6000611b3483836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615c68565b5190511090565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601281111561598e57fe5b84601781111561599a57fe5b604080519283526020830191909152818101859052519081900360600190a183601281111561197a57fe5b6000611b346159dc84670de0b6b3a7640000615916565b8351615cde565b6159eb615d6e565b6040518060200160405280615a18615a12866ec097ce7bc90715b34b9f1000000000615916565b85615cde565b90529392505050565b615a29615d6e565b6040518060200160405280615a18856000015185600001516158a6565b600081600160e01b8410615ad85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a9d578181015183820152602001615a85565b50505050905090810190601f168015615aca5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b600081600160201b8410615ad85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b615b3d615d6e565b6040518060200160405280615a18856000015185600001516158dc565b60006ec097ce7bc90715b34b9f1000000000615b7a848460000151615916565b81615b8157fe5b049392505050565b615b91615d6e565b6040518060200160405280615a18856000015185615916565b51670de0b6b3a7640000900490565b600083830182858210156130ad5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b60008184841115615c605760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b505050900390565b6000831580615c75575082155b15615c8257506000611b34565b83830283858281615c8f57fe5b041483906130ad5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b6000611b3483836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525060008183615d5b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b50828481615d6557fe5b04949350505050565b6040518060200160405280600081525090565b8154818355818111156121b5576000838152602090206121b5918101908301615dbc565b604080518082019091526000808252602082015290565b611bcc91905b80821115615dd65760008155600101615dc2565b509056fe5f7365744c69717569646174696f6e496e63656e746976652875696e74323536295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d296d696e7420626568616c66206572726f7220647572696e6720636f6c6c61746572616c697a65207876735f736574416374696f6e7350617573656428616464726573735b5d2c75696e743235365b5d2c626f6f6c2962616e6b72757074206163636f756e74732063616e206f6e6c7920636f6c6c61746572616c697a652074686569722070656e64696e672078767320726577617264735f736574436f6c6c61746572616c466163746f7228616464726573732c75696e7432353629a265627a7a723158205d62a757b1e343051a5d17b9570f2bf0af82430a0258994bf6502a1a1ae6e76e64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106105195760003560e01c806386df31ee116102a4578063bf32442d11610172578063ddfd287e116100d9578063ede4edd011610092578063ede4edd014611647578063ededbae61461166d578063f519fc3014611675578063f851a4401461169b578063fa6331d8146116a3578063fd51a3ad146116ab57610519565b8063ddfd287e14611580578063e37d4b7914611588578063e4028eee146115ae578063e85a2960146115da578063e875544614611609578063eabe7d911461161157610519565b8063d09c54ba1161012b578063d09c54ba146113ac578063d24febad146114d8578063d3270f991461150e578063da3d454c14611516578063dce154491461154c578063dcfbc0c71461157857610519565b8063bf32442d1461128e578063c299823814611296578063c488847b14611304578063c5b4db551461133a578063c5f956af1461135e578063d02f73511461136657610519565b8063a7604b4111610216578063b2eafc39116101cf578063b2eafc39146111c6578063b8324c7c146111ce578063bb82aa5e1461121c578063bb85745014611224578063bdcdc2581461124a578063bec04f721461128657610519565b8063a7604b411461108b578063a76b3fda146110b7578063a78dc775146110dd578063abfceffc14611122578063adcd5fb914611198578063b0772d0b146111be57610519565b8063929fe9a111610268578063929fe9a114610fd557806394b2294b146110035780639bb27d621461100b5780639bf34cbb146110135780639cfdd9e614611039578063a06a87f11461105f57610519565b806386df31ee14610ea6578063879c2e1d14610f575780638a7dc16514610f5f5780638e8f294b14610f855780639254f5e514610fcd57610519565b80634a584432116103ec5780635f5af1aa1161035357806370bf66f01161030c57806370bf66f014610d2c578063719f701b14610e605780637655138314610e685780637858524d14610e705780637d172bd514610e965780637dc0d1d014610e9e57610519565b80635f5af1aa14610b635780635fc7e71e14610b89578063607ef6c114610bcf5780636662c7c914610c8d5780636a56947e14610caa5780636d35bf9114610ce657610519565b806351a485e4116103a557806351a485e4146109ca57806351dff98914610a8857806352d84d1e14610ac457806355ee1fe114610ae15780635c77860514610b075780635ec88c7914610b3d57610519565b80634a584432146108bd5780634ada90af146108e35780634e0853db146108eb5780634e79238f1461091d5780634ef4c3e1146109775780634fd42e17146109ad57610519565b806326782247116104905780634088c73e116104495780634088c73e146107ef57806341a18d2c146107f757806341c728b914610825578063425fad581461086157806342cbb15c1461086957806347ef3b3b1461087157610519565b806326782247146106a85780632a6a6065146106b05780632b5d790c146106cf5780632bc7e29e1461078f5780632ec04124146107b5578063317b0b77146107d257610519565b80631abcaa77116104e25780631abcaa77146105b05780631d504dc6146105d65780631ededc91146105fe57806321af45691461064057806324008a621461066457806324a3d622146106a057610519565b80627e3dd21461051e57806302c3bcbb1461053a57806304ef9d581461057257806308e0225c1461057a5780630db4b4e5146105a8575b600080fd5b6105266116d7565b604080519115158252519081900360200190f35b6105606004803603602081101561055057600080fd5b50356001600160a01b03166116dc565b60408051918252519081900360200190f35b6105606116ee565b6105606004803603604081101561059057600080fd5b506001600160a01b03813581169160200135166116f4565b610560611711565b610560600480360360208110156105c657600080fd5b50356001600160a01b0316611717565b6105fc600480360360208110156105ec57600080fd5b50356001600160a01b0316611729565b005b6105fc600480360360a081101561061457600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135611897565b61064861189e565b604080516001600160a01b039092168252519081900360200190f35b6105606004803603608081101561067a57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356118ad565b610648611982565b610648611991565b610526600480360360208110156106c657600080fd5b503515156119a0565b6105fc600480360360608110156106e557600080fd5b810190602081018135600160201b8111156106ff57600080fd5b82018360208201111561071157600080fd5b803590602001918460208302840111600160201b8311171561073257600080fd5b919390929091602081019035600160201b81111561074f57600080fd5b82018360208201111561076157600080fd5b803590602001918460208302840111600160201b8311171561078257600080fd5b9193509150351515611a36565b610560600480360360208110156107a557600080fd5b50356001600160a01b0316611ad2565b610560600480360360208110156107cb57600080fd5b5035611ae4565b610560600480360360208110156107e857600080fd5b5035611b3b565b610526611b8f565b6105606004803603604081101561080d57600080fd5b506001600160a01b0381358116916020013516611b98565b6105fc6004803603608081101561083b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611bb5565b610526611bbb565b610560611bca565b6105fc600480360360c081101561088757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135611bcf565b610560600480360360208110156108d357600080fd5b50356001600160a01b0316611bd7565b610560611be9565b6105fc6004803603606081101561090157600080fd5b506001600160a01b038135169060208101359060400135611bef565b6109596004803603608081101561093357600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611c6d565b60408051938452602084019290925282820152519081900360600190f35b6105606004803603606081101561098d57600080fd5b506001600160a01b03813581169160208101359091169060400135611ca3565b610560600480360360208110156109c357600080fd5b5035611ea7565b6105fc600480360360408110156109e057600080fd5b810190602081018135600160201b8111156109fa57600080fd5b820183602082011115610a0c57600080fd5b803590602001918460208302840111600160201b83111715610a2d57600080fd5b919390929091602081019035600160201b811115610a4a57600080fd5b820183602082011115610a5c57600080fd5b803590602001918460208302840111600160201b83111715610a7d57600080fd5b509092509050611f71565b6105fc60048036036080811015610a9e57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356120c4565b61064860048036036020811015610ada57600080fd5b5035612115565b61056060048036036020811015610af757600080fd5b50356001600160a01b031661213c565b6105fc60048036036060811015610b1d57600080fd5b506001600160a01b038135811691602081013590911690604001356121b5565b61095960048036036020811015610b5357600080fd5b50356001600160a01b03166121ba565b61056060048036036020811015610b7957600080fd5b50356001600160a01b03166121ef565b610560600480360360a0811015610b9f57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135612268565b6105fc60048036036040811015610be557600080fd5b810190602081018135600160201b811115610bff57600080fd5b820183602082011115610c1157600080fd5b803590602001918460208302840111600160201b83111715610c3257600080fd5b919390929091602081019035600160201b811115610c4f57600080fd5b820183602082011115610c6157600080fd5b803590602001918460208302840111600160201b83111715610c8257600080fd5b509092509050612459565b6105fc60048036036020811015610ca357600080fd5b50356125a3565b6105fc60048036036080811015610cc057600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356125f2565b6105fc600480360360a0811015610cfc57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611897565b6105fc600480360360a0811015610d4257600080fd5b810190602081018135600160201b811115610d5c57600080fd5b820183602082011115610d6e57600080fd5b803590602001918460208302840111600160201b83111715610d8f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610dde57600080fd5b820183602082011115610df057600080fd5b803590602001918460208302840111600160201b83111715610e1157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050505080351515915060208101351515906040013515156125f7565b6105606127e4565b6105266127ea565b6105fc60048036036020811015610e8657600080fd5b50356001600160a01b03166127f8565b6106486128b5565b6106486128c4565b6105fc60048036036040811015610ebc57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610ee657600080fd5b820183602082011115610ef857600080fd5b803590602001918460208302840111600160201b83111715610f1957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506128d3945050505050565b610560612930565b61056060048036036020811015610f7557600080fd5b50356001600160a01b0316612936565b610fab60048036036020811015610f9b57600080fd5b50356001600160a01b0316612948565b6040805193151584526020840192909252151582820152519081900360600190f35b61064861296e565b61052660048036036040811015610feb57600080fd5b506001600160a01b038135811691602001351661297d565b6105606129b1565b6106486129b7565b6105606004803603602081101561102957600080fd5b50356001600160a01b03166129c6565b6105606004803603602081101561104f57600080fd5b50356001600160a01b0316612a3e565b6105fc6004803603604081101561107557600080fd5b506001600160a01b038135169060200135612ab7565b6105fc600480360360408110156110a157600080fd5b506001600160a01b038135169060200135612adf565b610560600480360360208110156110cd57600080fd5b50356001600160a01b0316612ba1565b611109600480360360408110156110f357600080fd5b506001600160a01b038135169060200135612d26565b6040805192835260208301919091528051918290030190f35b6111486004803603602081101561113857600080fd5b50356001600160a01b0316612dc5565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561118457818101518382015260200161116c565b505050509050019250505060405180910390f35b6105fc600480360360208110156111ae57600080fd5b50356001600160a01b0316612e3b565b611148612e9f565b610648612f01565b6111f4600480360360208110156111e457600080fd5b50356001600160a01b0316612f10565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b610648612f3a565b6105fc6004803603602081101561123a57600080fd5b50356001600160a01b0316612f49565b6105606004803603608081101561126057600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612fb4565b610560613002565b610648613008565b611148600480360360208110156112ac57600080fd5b810190602081018135600160201b8111156112c657600080fd5b8201836020820111156112d857600080fd5b803590602001918460208302840111600160201b831117156112f957600080fd5b509092509050613020565b6111096004803603606081101561131a57600080fd5b506001600160a01b038135811691602081013590911690604001356130b6565b61134261315e565b604080516001600160e01b039092168252519081900360200190f35b610648613171565b610560600480360360a081101561137c57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135613180565b6105fc600480360360808110156113c257600080fd5b810190602081018135600160201b8111156113dc57600080fd5b8201836020820111156113ee57600080fd5b803590602001918460208302840111600160201b8311171561140f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561145e57600080fd5b82018360208201111561147057600080fd5b803590602001918460208302840111600160201b8311171561149157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050508035151591506020013515156132ff565b610560600480360360608110156114ee57600080fd5b506001600160a01b0381358116916020810135909116906040013561330d565b610648613498565b6105606004803603606081101561152c57600080fd5b506001600160a01b038135811691602081013590911690604001356134a7565b6106486004803603604081101561156257600080fd5b506001600160a01b0381351690602001356137f1565b610648613826565b6105fc613835565b6111f46004803603602081101561159e57600080fd5b50356001600160a01b0316613a65565b610560600480360360408110156115c457600080fd5b506001600160a01b038135169060200135613a8f565b610526600480360360408110156115f057600080fd5b5080356001600160a01b0316906020013560ff16613c31565b610560613c71565b6105606004803603606081101561162757600080fd5b506001600160a01b03813581169160208101359091169060400135613c77565b6105606004803603602081101561165d57600080fd5b50356001600160a01b0316613cc6565b610648613f7d565b6105606004803603602081101561168b57600080fd5b50356001600160a01b0316613f95565b61064861400d565b61056061401c565b610560600480360360408110156116c157600080fd5b506001600160a01b038135169060200135614022565b600181565b60276020526000908152604090205481565b60225481565b601360209081526000928352604080842090915290825290205481565b601d5481565b600f6020526000908152604090205481565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d602081101561178c57600080fd5b50516001600160a01b031633146117ea576040805162461bcd60e51b815260206004820152601960248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e00000000000000604482015290519081900360640190fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561182557600080fd5b505af1158015611839573d6000803e3d6000fd5b505050506040513d602081101561184f57600080fd5b505115611894576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b50565b5050505050565b601e546001600160a01b031681565b60006118b76140cf565b6118c2856003614122565b6001600160a01b03851660009081526009602052604090206118e390614171565b6118eb615d6e565b6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d602081101561195957600080fd5b50519052905061196986826141bb565b61197486858361444f565b60009150505b949350505050565b600a546001600160a01b031681565b6001546001600160a01b031681565b60006119e06040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250614632565b6018805483151562010000810262ff0000199092169190911790915560408051918252517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b389181900360200190a150805b919050565b611a576040518060600160405280602b8152602001615e78602b9139614632565b838260005b82811015611ac85760005b82811015611abf57611ab7898984818110611a7e57fe5b905060200201356001600160a01b0316888884818110611a9a57fe5b90506020020135600881118015611ab057600080fd5b5087614753565b600101611a67565b50600101611a5c565b5050505050505050565b60166020526000908152604090205481565b6000611aee61480b565b6017805490839055604080518281526020810185905281517f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a4929181900390910190a160005b9392505050565b6000611b4561480b565b6005805490839055604080518281526020810185905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a16000611b34565b60185460ff1681565b601260209081526000928352604080842090915290825290205481565b50505050565b60185462010000900460ff1681565b435b90565b505050505050565b601f6020526000908152604090205481565b60065481565b611bf761480b565b611c008361485b565b601b80546001600160a01b0385166001600160a01b03199091168117909155601c839055601d8290556040805191825260208201849052818101839052517f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e9181900360600190a1505050565b600080600080600080611c828a8a8a8a6148ae565b925092509250826012811115611c9457fe5b9a919950975095505050505050565b6000611cad6140cf565b611cb8846000614122565b6001600160a01b0384166000908152600960205260409020611cd990614171565b6001600160a01b03841660009081526027602052604090205480611d3d576040805162461bcd60e51b815260206004820152601660248201527506d61726b657420737570706c792063617020697320360541b604482015290519081900360640190fd5b6000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d6020811015611da257600080fd5b50519050611dae615d6e565b6040518060200160405280886001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d6020811015611e1c57600080fd5b5051905290506000611e2f82848861496d565b905083811115611e86576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015290519081900360640190fd5b611e8f88614995565b611e998888614c1f565b506000979650505050505050565b6000611eca604051806060016040528060218152602001615ddb60219139614632565b670de0b6b3a7640000821015611f27576040805162461bcd60e51b815260206004820152601b60248201527f696e63656e74697665206d757374206265206f76657220316531380000000000604482015290519081900360640190fd5b6006805490839055604080518281526020810185905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611b34565b611f92604051806060016040528060298152602001615dfc60299139614632565b82818115801590611fa257508082145b611fe3576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156120bb57848482818110611ffa57fe5b905060200201356027600089898581811061201157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061205157fe5b905060200201356001600160a01b03166001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061209757fe5b905060200201356040518082815260200191505060405180910390a2600101611fe6565b50505050505050565b801515806120d0575081155b611bb5576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b600d818154811061212257fe5b6000918252602090912001546001600160a01b0316905081565b600061214661480b565b61214f8261485b565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a16000611b34565b505050565b6000806000806000806121d18760008060006148ae565b9250925092508260128111156121e357fe5b97919650945092505050565b60006121f961480b565b6122028261485b565b600a80546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e929181900390910190a16000611b34565b60006122726140cf565b61227d866005614122565b6025546001600160a01b0316158015906122a557506025546001600160a01b03858116911614155b156122b45760015b9050612450565b6001600160a01b03851660009081526009602052604090206122d590614171565b6015546001600160a01b0387811691161461230b576001600160a01b038616600090815260096020526040902061230b90614171565b60008061231c8560008060006148ae565b9193509091506000905082601281111561233257fe5b1461234c5781601281111561234357fe5b92505050612450565b80612358576003612343565b6015546000906001600160a01b038a81169116146123f957886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b50519050612414565b506001600160a01b0385166000908152601660205260409020545b6000612430604051806020016040528060055481525083614e4a565b905080861115612447576011945050505050612450565b60009450505050505b95945050505050565b61247a604051806060016040528060298152602001615e2560299139614632565b8281811580159061248a57508082145b6124cb576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156120bb578484828181106124e257fe5b90506020020135601f60008989858181106124f957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061253957fe5b905060200201356001600160a01b03166001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f686868481811061257f57fe5b905060200201356040518082815260200191505060405180910390a26001016124ce565b6125ab61480b565b601a805490829055604080518281526020810184905281517fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b929181900390910190a15050565b611bb5565b6000805b855181101561275c57600086828151811061261257fe5b6020026020010151905061264960096000836001600160a01b03166001600160a01b03168152602001908152602001600020614171565b851561270e57612657615d6e565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b5051905290506126d582826141bb565b600093505b885184101561270c57612701828a86815181106126f357fe5b60200260200101518361444f565b6001909301926126da565b505b84156127535761271d81614995565b600092505b8751831015612753576127488189858151811061273b57fe5b6020026020010151614c1f565b600190920191612722565b506001016125fb565b50600090505b8551811015611bcf57600086828151811061277957fe5b6020026020010151905060006127938260008060006148ae565b6001600160a01b0385166000908152601460205260409020549093506127be92508491508387614e69565b6001600160a01b0390921660009081526014602052604090209190915550600101612762565b601c5481565b601854610100900460ff1681565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811061282857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506128b181600d8054806020026020016040519081016040528092919081815260200182805480156128a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612884575b505050505060018060016125f7565b5050565b601b546001600160a01b031681565b6004546001600160a01b031681565b60408051600180825281830190925260609160208083019080388339019050509050828160008151811061290357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506121b581836001806132ff565b600e5481565b60146020526000908152604090205481565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b6015546001600160a01b031681565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff165b92915050565b60075481565b6025546001600160a01b031681565b60006129d061480b565b6129d98261485b565b602680546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a9281900390910190a16000611b34565b6000612a4861480b565b612a518261485b565b601580546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b2929181900390910190a16000611b34565b600254612acc906001600160a01b0316615228565b612ad58261485b565b6128b1828261528a565b600254612af4906001600160a01b0316615228565b6000612b038383600080614e69565b90508015612b58576040805162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e742078767320666f72206772616e74000000000000604482015290519081900360640190fd5b604080516001600160a01b03851681526020810184905281517fd7fe674cac9eee3998fe3cbd7a6f93c3bc70509d97ec1550a59364be6438147e929181900390910190a1505050565b6000612be16040518060400160405280601781526020017f5f737570706f72744d61726b6574286164647265737329000000000000000000815250614632565b6001600160a01b03821660009081526009602052604090205460ff1615612c1557612c0e600a60116155c8565b9050611a31565b816001600160a01b0316633d9ea3a16040518163ffffffff1660e01b815260040160206040518083038186803b158015612c4e57600080fd5b505afa158015612c62573d6000803e3d6000fd5b505050506040513d6020811015612c7857600080fd5b5050604080516060810182526001808252600060208381018281528486018381526001600160a01b03891684526009909252949091209251835490151560ff19918216178455935191830191909155516003909101805491151591909216179055612ce28261562e565b604080516001600160a01b038416815290517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9181900360200190a1600092915050565b602654604080516304f65f8b60e21b81523060048201526001600160a01b038581166024830152604482018590528251600094859485948594909216926313d97e2c926064808201939291829003018186803b158015612d8557600080fd5b505afa158015612d99573d6000803e3d6000fd5b505050506040513d6040811015612daf57600080fd5b5080516020909101519097909650945050505050565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015612e2f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e11575b50505050509050919050565b61189481600d805480602002602001604051908101604052809291908181526020018280548015612e9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e77575b50505050506128d3565b6060600d805480602002602001604051908101604052809291908181526020018280548015612ef757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ed9575b5050505050905090565b6020546001600160a01b031681565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6002546001600160a01b031681565b612f5161480b565b602580546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac1929181900390910190a15050565b6000612fbe6140cf565b612fc9856006614122565b6000612fd686868561570c565b90508015612fe557905061197a565b612fee86614995565b612ff88686614c1f565b6119748685614c1f565b60175481565b73cf6bb5389c92bdda8a3747ddb454cb7a64626c6390565b60408051828152602080840282010190915260609082908290828015613050578160200160208202803883390190505b50905060005b828110156130ad5761308386868381811061306d57fe5b905060200201356001600160a01b0316336157b2565b601281111561308e57fe5b82828151811061309a57fe5b6020908102919091010152600101613056565b50949350505050565b60265460408051630779996560e11b81523060048201526001600160a01b038681166024830152858116604483015260648201859052825160009485948594859490921692630ef332ca926084808201939291829003018186803b15801561311d57600080fd5b505afa158015613131573d6000803e3d6000fd5b505050506040513d604081101561314757600080fd5b508051602090910151909890975095505050505050565b6ec097ce7bc90715b34b9f100000000081565b6021546001600160a01b031681565b600061318a6140cf565b613195866004614122565b6001600160a01b03861660009081526009602052604090206131b690614171565b6015546001600160a01b038681169116146131ec576001600160a01b03851660009081526009602052604090206131ec90614171565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561322557600080fd5b505afa158015613239573d6000803e3d6000fd5b505050506040513d602081101561324f57600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b15801561329557600080fd5b505afa1580156132a9573d6000803e3d6000fd5b505050506040513d60208110156132bf57600080fd5b50516001600160a01b0316146132d65760026122ad565b6132df86614995565b6132e98684614c1f565b6132f38685614c1f565b60009695505050505050565b611bb58484848460006125f7565b602054600090613325906001600160a01b0316615228565b670de0b6b3a76400008210613381576040805162461bcd60e51b815260206004820152601d60248201527f74726561737572792070657263656e7420636170206f766572666c6f77000000604482015290519081900360640190fd5b61338a8461485b565b6133938361485b565b6020805460218054602280546001600160a01b038a81166001600160a01b0319808816821789558b8316908616179095559188905560408051958316808752968601949094528351929091169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a16000979650505050505050565b6026546001600160a01b031681565b60006134b16140cf565b6134bc846002614122565b6001600160a01b03841660009081526009602052604090206134dd90614171565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661359a57336001600160a01b03851614613563576040805162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba103132903b2a37b5b2b760591b604482015290519081900360640190fd5b600061356f85856157b2565b9050600081601281111561357f57fe5b146135985780601281111561359057fe5b915050611b34565b505b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b1580156135eb57600080fd5b505afa1580156135ff573d6000803e3d6000fd5b505050506040513d602081101561361557600080fd5b505161362557600d5b9050611b34565b6001600160a01b0384166000908152601f60205260409020548015613712576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561367f57600080fd5b505afa158015613693573d6000803e3d6000fd5b505050506040513d60208110156136a957600080fd5b5051905060006136b982866158a6565b905082811061370f576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015290519081900360640190fd5b50505b60008061372286886000886148ae565b9193509091506000905082601281111561373857fe5b146137535781601281111561374957fe5b9350505050611b34565b8015613760576004613749565b613768615d6e565b6040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ac57600080fd5b505afa1580156137c0573d6000803e3d6000fd5b505050506040513d60208110156137d657600080fd5b5051905290506137e688826141bb565b611e9988888361444f565b6008602052816000526040600020818154811061380a57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b601c54158061384c5750601c5461384a611bca565b105b1561385657613a63565b6000613860613008565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156138ac57600080fd5b505afa1580156138c0573d6000803e3d6000fd5b505050506040513d60208110156138d657600080fd5b50519050806138e6575050613a63565b6000806138fc6138f4611bca565b601c546158dc565b9050600061390c601a5483615916565b905080841061391d57809250613921565b8392505b601d54831015613935575050505050613a63565b61393d611bca565b601c55601b546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810186905290519187169163a9059cbb916044808201926020929091908290030181600087803b15801561399657600080fd5b505af11580156139aa573d6000803e3d6000fd5b505050506040513d60208110156139c057600080fd5b50506040805184815290517ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9181900360200190a1601b60009054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613a4557600080fd5b505af1158015613a59573d6000803e3d6000fd5b5050505050505050505b565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6000613ab2604051806060016040528060258152602001615ee560259139614632565b613abb8361485b565b6001600160a01b0383166000908152600960205260409020613adc81614171565b613ae4615d6e565b506040805160208101909152838152613afb615d6e565b506040805160208101909152670c7d713b49da00008152613b1c8183615958565b15613b3757613b2d600660086155c8565b93505050506129ab565b8415801590613bc05750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015613b9257600080fd5b505afa158015613ba6573d6000803e3d6000fd5b505050506040513d6020811015613bbc57600080fd5b5051155b15613bd157613b2d600d60096155c8565b60018301805490869055604080516001600160a01b03891681526020810183905280820188905290517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a16000979650505050505050565b6001600160a01b038216600090815260296020526040812081836008811115613c5657fe5b815260208101919091526040016000205460ff169392505050565b60055481565b6000613c816140cf565b613c8c846001614122565b6000613c9985858561570c565b90508015613ca8579050611b34565b613cb185614995565b613cbb8585614c1f565b600095945050505050565b6000613cd3826008614122565b604080516361bfb47160e11b815233600482015290518391600091829182916001600160a01b0386169163c37f68e2916024808301926080929190829003018186803b158015613d2257600080fd5b505afa158015613d36573d6000803e3d6000fd5b505050506040513d6080811015613d4c57600080fd5b508051602082015160409092015190945090925090508215613db5576040805162461bcd60e51b815260206004820152601960248201527f6765744163636f756e74536e617073686f74206661696c656400000000000000604482015290519081900360640190fd5b8015613dd257613dc7600c60026155c8565b945050505050611a31565b6000613ddf87338561570c565b90508015613e0057613df4600e60038361595f565b95505050505050611a31565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff16613e3f5760009650505050505050611a31565b3360009081526002820160209081526040808320805460ff1916905560089091528120805490915b81811015613f2057886001600160a01b0316838281548110613e8557fe5b6000918252602090912001546001600160a01b03161415613f1857826001830381548110613eaf57fe5b9060005260206000200160009054906101000a90046001600160a01b0316838281548110613ed957fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558254613f12846000198301615d81565b50613f20565b600101613e67565b818110613f2957fe5b604080516001600160a01b038b16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009b9a5050505050505050505050565b73151b1e2635a717bcdc836ecd6fbb62b674fe3e1d90565b6000613f9f61480b565b613fa88261485b565b602880546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd49281900390910190a16000611b34565b6000546001600160a01b031681565b601a5481565b600061402c6140cf565b60185460ff161580156140475750601854610100900460ff16155b614088576040805162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b604482015290519081900360640190fd5b6015546001600160a01b031633146140ad576140a6600e60166155c8565b90506129ab565b6001600160a01b03831660009081526016602052604081208390559392505050565b60185462010000900460ff1615613a63576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b61412c8282613c31565b156128b1576040805162461bcd60e51b815260206004820152601060248201526f1858dd1a5bdb881a5cc81c185d5cd95960821b604482015290519081900360640190fd5b805460ff16611894576040805162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015290519081900360640190fd5b6001600160a01b0382166000908152601160209081526040808320600f90925282205490916141e8611bca565b8354909150600090614208908390600160e01b900463ffffffff166158dc565b905060008111801561421a5750600083115b156143ea57600061428f876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561425d57600080fd5b505afa158015614271573d6000803e3d6000fd5b505050506040513d602081101561428757600080fd5b5051876159c5565b9050600061429d8386615916565b90506142a7615d6e565b600083116142c457604051806020016040528060008152506142ce565b6142ce82846159e3565b90506142d8615d6e565b604080516020810190915288546001600160e01b031681526142fa9083615a21565b905060405180604001604052806143408360000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250615a46565b6001600160e01b031681526020016143868860405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b63ffffffff9081169091526001600160a01b038c166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b0319909416939093171691909117905550611bcf92505050565b8015611bcf576144288260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b601b546001600160a01b03161561446857614468613835565b614470615da5565b506001600160a01b0383166000908152601160209081526040918290208251808401909352546001600160e01b0381168352600160e01b900463ffffffff16908201526144bb615d6e565b50604080516020810190915281516001600160e01b031681526144dc615d6e565b5060408051602080820183526001600160a01b0380891660009081526013835284812091891680825282845294812080548552865195909152915291909155805115611bcf5761452a615d6e565b6145348383615b35565b90506000614591886001600160a01b03166395dd9193896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561425d57600080fd5b9050600061459f8284615b5a565b6001600160a01b038916600090815260146020526040812054919250906145c690836158a6565b6001600160a01b03808b166000818152601460209081526040918290208590558a5182518881529182015281519495509193928e16927f837bdc11fca9f17ce44167944475225a205279b17e88c791c3b1f66f354668fb9281900390910190a350505050505050505050565b602854604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b8381101561469b578181015183820152602001614683565b50505050905090810190601f1680156146c85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156146e657600080fd5b505afa1580156146fa573d6000803e3d6000fd5b505050506040513d602081101561471057600080fd5b5051611894576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6001600160a01b038316600090815260096020526040902061477490614171565b6001600160a01b0383166000908152602960205260408120829184600881111561479a57fe5b81526020810191909152604001600020805460ff19169115159190911790558160088111156147c557fe5b60408051831515815290516001600160a01b038616917f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d919081900360200190a3505050565b6000546001600160a01b03163314613a63576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b038116611894576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b6026546040805163a7032efb60e01b81523060048201526001600160a01b03878116602483015286811660448301526064820186905260848201859052915160009384938493849384938493169163a7032efb9160a4808301926060929190829003018186803b15801561492157600080fd5b505afa158015614935573d6000803e3d6000fd5b505050506040513d606081101561494b57600080fd5b50805160208201516040909201519094509092509050826012811115611c9457fe5b6000614977615d6e565b6149818585615b89565b905061245061498f82615baa565b846158a6565b6001600160a01b0381166000908152601060209081526040808320600f90925282205490916149c2611bca565b83549091506000906149e2908390600160e01b900463ffffffff166158dc565b90506000811180156149f45750600083115b15614bbb576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a3457600080fd5b505afa158015614a48573d6000803e3d6000fd5b505050506040513d6020811015614a5e57600080fd5b505190506000614a6e8386615916565b9050614a78615d6e565b60008311614a955760405180602001604052806000815250614a9f565b614a9f82846159e3565b9050614aa9615d6e565b604080516020810190915288546001600160e01b03168152614acb9083615a21565b90506040518060400160405280614b118360000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250615a46565b6001600160e01b03168152602001614b578860405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b63ffffffff9081169091526001600160a01b038b166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061189792505050565b801561189757614bf98260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250615ae0565b845463ffffffff91909116600160e01b026001600160e01b039091161784555050505050565b601b546001600160a01b031615614c3857614c38613835565b614c40615da5565b506001600160a01b0382166000908152601060209081526040918290208251808401909352546001600160e01b0381168352600160e01b900463ffffffff1690820152614c8b615d6e565b50604080516020810190915281516001600160e01b03168152614cac615d6e565b5060408051602080820183526001600160a01b03808816600090815260128352848120918816808252828452948120805485528651959091529152919091558051158015614cfa5750815115155b15614d12576ec097ce7bc90715b34b9f100000000081525b614d1a615d6e565b614d248383615b35565b90506000866001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d6020811015614da857600080fd5b505190506000614db88284615b5a565b6001600160a01b03881660009081526014602052604081205491925090614ddf90836158a6565b6001600160a01b03808a166000818152601460209081526040918290208590558a5182518881529182015281519495509193928d16927ffa9d964d891991c113b49e3db1932abd6c67263d387119707aafdd6c4010a3a99281900390910190a3505050505050505050565b6000614e54615d6e565b614e5e8484615b89565b905061197a81615baa565b600073ef044206db68e40520bfa82d45419d498b4bc7bf6001600160a01b03861614801590614eb55750737589dd3355dae848fdbf75044a3495351655cb1a6001600160a01b03861614155b8015614ede57507333df7a7f6d44307e1e5f3b15975b47515e5524c06001600160a01b03861614155b8015614f0757507324e77e5b74b30b026e9996e4bc3329c881e249686001600160a01b03861614155b614f46576040805162461bcd60e51b815260206004820152600b60248201526a109b1858dadb1a5cdd195960aa1b604482015290519081900360640190fd5b6000614f50613008565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015614f9c57600080fd5b505afa158015614fb0573d6000803e3d6000fd5b505050506040513d6020811015614fc657600080fd5b50519050841515861580614fd957508187115b15614fe95786935050505061197a565b8061508757826001600160a01b031663a9059cbb89896040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561504e57600080fd5b505af1158015615062573d6000803e3d6000fd5b505050506040513d602081101561507857600080fd5b506000945061197a9350505050565b846150c35760405162461bcd60e51b8152600401808060200182810382526042815260200180615ea36042913960600191505060405180910390fd5b826001600160a01b031663095ea7b36150da613f7d565b896040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561512a57600080fd5b505af115801561513e573d6000803e3d6000fd5b505050506040513d602081101561515457600080fd5b5060009050615161613f7d565b6001600160a01b03166323323e038a8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156151c057600080fd5b505af11580156151d4573d6000803e3d6000fd5b505050506040513d60208110156151ea57600080fd5b505114611e995760405162461bcd60e51b815260040180806020018281038252602a815260200180615e4e602a913960400191505060405180910390fd5b6000546001600160a01b03163314806152495750336001600160a01b038216145b611894576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6001600160a01b0382166000908152600f6020526040902054801561533e576152b1615d6e565b6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156152f557600080fd5b505afa158015615309573d6000803e3d6000fd5b505050506040513d602081101561531f57600080fd5b50519052905061532e84614995565b61533884826141bb565b5061556c565b811561556c576001600160a01b038316600090815260096020526040902061536590614171565b6001600160a01b0383166000908152601060205260409020546001600160e01b03161580156153b757506001600160a01b038316600090815260106020526040902054600160e01b900463ffffffff16155b156154865760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b0316815260200161542b6153f0611bca565b6040518060400160405280601c81526020017f626c6f636b206e756d6265722065786365656473203332206269747300000000815250615ae0565b63ffffffff9081169091526001600160a01b0385166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b6001600160a01b0383166000908152601160205260409020546001600160e01b03161580156154d857506001600160a01b038316600090815260116020526040902054600160e01b900463ffffffff16155b1561556c5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b031681526020016155116153f0611bca565b63ffffffff9081169091526001600160a01b0385166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b8181146121b5576001600160a01b0383166000818152600f6020908152604091829020859055815185815291517f2a0ce45ba05a83e75ba21e1a10d6b48a8395028cc6e1ae66f6c313648379d5489281900390910190a2505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360128111156155f757fe5b83601781111561560357fe5b604080519283526020830191909152600082820152519081900360600190a1826012811115611b3457fe5b60005b600d548110156156b957816001600160a01b0316600d828154811061565257fe5b6000918252602090912001546001600160a01b031614156156b1576040805162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015290519081900360640190fd5b600101615631565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316600090815260096020526040812061572d90614171565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661576557600061361e565b60008061577585878660006148ae565b9193509091506000905082601281111561578b57fe5b146157a55781601281111561579c57fe5b92505050611b34565b80156132f357600461579c565b60006157bf836007614122565b6001600160a01b03831660009081526009602052604090206157e081614171565b6001600160a01b038316600090815260028201602052604090205460ff161561580d5760009150506129ab565b6001600160a01b0380841660008181526002840160209081526040808320805460ff19166001908117909155600883528184208054918201815584529282902090920180549489166001600160a01b031990951685179055815193845283019190915280517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59281900390910190a15060009392505050565b6000611b348383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250615bb9565b6000611b348383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250615c0e565b6000611b3483836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615c68565b5190511090565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601281111561598e57fe5b84601781111561599a57fe5b604080519283526020830191909152818101859052519081900360600190a183601281111561197a57fe5b6000611b346159dc84670de0b6b3a7640000615916565b8351615cde565b6159eb615d6e565b6040518060200160405280615a18615a12866ec097ce7bc90715b34b9f1000000000615916565b85615cde565b90529392505050565b615a29615d6e565b6040518060200160405280615a18856000015185600001516158a6565b600081600160e01b8410615ad85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a9d578181015183820152602001615a85565b50505050905090810190601f168015615aca5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b600081600160201b8410615ad85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b615b3d615d6e565b6040518060200160405280615a18856000015185600001516158dc565b60006ec097ce7bc90715b34b9f1000000000615b7a848460000151615916565b81615b8157fe5b049392505050565b615b91615d6e565b6040518060200160405280615a18856000015185615916565b51670de0b6b3a7640000900490565b600083830182858210156130ad5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b60008184841115615c605760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b505050900390565b6000831580615c75575082155b15615c8257506000611b34565b83830283858281615c8f57fe5b041483906130ad5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b6000611b3483836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525060008183615d5b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615a9d578181015183820152602001615a85565b50828481615d6557fe5b04949350505050565b6040518060200160405280600081525090565b8154818355818111156121b5576000838152602090206121b5918101908301615dbc565b604080518082019091526000808252602082015290565b611bcc91905b80821115615dd65760008155600101615dc2565b509056fe5f7365744c69717569646174696f6e496e63656e746976652875696e74323536295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d296d696e7420626568616c66206572726f7220647572696e6720636f6c6c61746572616c697a65207876735f736574416374696f6e7350617573656428616464726573735b5d2c75696e743235365b5d2c626f6f6c2962616e6b72757074206163636f756e74732063616e206f6e6c7920636f6c6c61746572616c697a652074686569722070656e64696e672078767320726577617264735f736574436f6c6c61746572616c466163746f7228616464726573732c75696e7432353629a265627a7a723158205d62a757b1e343051a5d17b9570f2bf0af82430a0258994bf6502a1a1ae6e76e64736f6c63430005100032",
  "devdoc": {
    "author": "Venus",
    "methods": {
      "_grantXVS(address,uint256)": {
        "details": "Note: If there is not enough XVS, we do not perform the transfer all.",
        "params": {
          "amount": "The amount of XVS to (possibly) transfer",
          "recipient": "The address of the recipient to transfer XVS to"
        }
      },
      "_setAccessControl(address)": {
        "details": "Admin function to set the access control address",
        "params": {
          "newAccessControlAddress": "New address for the access control"
        },
        "return": "uint 0=success, otherwise will revert"
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "params": {
          "actions": "List of action ids to pause/unpause",
          "markets": "Markets to pause/unpause the actions on",
          "paused": "The new paused state (true=paused, false=unpaused)"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "return": "uint 0=success, otherwise will revert"
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Restricted function to set per-market collateralFactor",
        "params": {
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18",
          "vToken": "The market to set the factor on"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setComptrollerLens(address)": {
        "details": "Set ComptrollerLens contract address"
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Access is controled by ACM. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.",
          "vTokens": "The addresses of the markets (tokens) to change the borrow caps for"
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin function to set the supply caps. A supply cap of 0 corresponds to Minting NotAllowed.",
        "params": {
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed.",
          "vTokens": "The addresses of the markets (tokens) to change the supply caps for"
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setVAIController(address)": {
        "details": "Admin function to set a new VAI controller",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "params": {
          "minReleaseAmount_": "The minimum release amount to VAI Vault",
          "releaseStartBlock_": "The start block of release to VAI Vault",
          "vault_": "The address of the VAI Vault"
        }
      },
      "_setVenusSpeed(address,uint256)": {
        "params": {
          "vToken": "The market whose XVS speed to update",
          "venusSpeed": "New XVS speed for market"
        }
      },
      "_setVenusVAIVaultRate(uint256)": {
        "params": {
          "venusVAIVaultRate_": "The amount of XVS wei per block to distribute to VAI Vault"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "vToken": "The address of the market (token) to list"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "actionPaused(address,uint8)": {
        "params": {
          "action": "Action id",
          "market": "vToken address"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "vToken": "The market to verify the borrow against"
        },
        "return": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "vToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "vToken": "The vToken to check"
        },
        "return": "True if the account is in the asset, otherwise false."
      },
      "claimVenus(address)": {
        "params": {
          "holder": "The address to claim XVS for"
        }
      },
      "claimVenus(address,address[])": {
        "params": {
          "holder": "The address to claim XVS for",
          "vTokens": "The list of markets to claim XVS in"
        }
      },
      "claimVenus(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim XVS earned by borrowing",
          "holders": "The addresses to claim XVS for",
          "suppliers": "Whether or not to claim XVS earned by supplying",
          "vTokens": "The list of markets to claim XVS in"
        }
      },
      "claimVenus(address[],address[],bool,bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim XVS earned by borrowing",
          "collateral": "Whether or not to use XVS earned as collateral, only takes effect when the holder has a shortfall",
          "holders": "The addresses to claim XVS for",
          "suppliers": "Whether or not to claim XVS earned by supplying",
          "vTokens": "The list of markets to claim XVS in"
        }
      },
      "claimVenusAsCollateral(address)": {
        "params": {
          "holder": "The address to claim XVS for"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "vTokens": "The list of addresses of the vToken markets to be enabled"
        },
        "return": "Success indicator for whether each corresponding market was entered"
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "vTokenAddress": "The address of the asset to be removed"
        },
        "return": "Whether or not the account successfully exited the market"
      },
      "getAccountLiquidity(address)": {
        "return": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)"
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "return": "The list of market addresses"
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "return": "A dynamic list with the assets the account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "redeemTokens": "The number of tokens to hypothetically redeem",
          "vTokenModify": "The market to hypothetically redeem/borrow in"
        },
        "return": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)"
      },
      "getXVSAddress()": {
        "return": "The address of XVS"
      },
      "getXVSVTokenAddress()": {
        "return": "The address of XVS vToken"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The amount of collateral token that will be seized",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in vToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens",
          "vTokenBorrowed": "The address of the borrowed vToken",
          "vTokenCollateral": "The address of the collateral vToken"
        },
        "return": "(errorCode, number of vTokenCollateral tokens to be seized in a liquidation)"
      },
      "liquidateVAICalculateSeizeTokens(address,uint256)": {
        "details": "Used in liquidation (called in vToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens",
          "vTokenCollateral": "The address of the collateral vToken"
        },
        "return": "(errorCode, number of vTokenCollateral tokens to be seized in a liquidation)"
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens",
          "vToken": "The market to verify the mint against"
        },
        "return": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens",
          "vToken": "Asset being minted"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "redeemTokens": "The number of vTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens",
          "vToken": "The market to verify the redeem against"
        },
        "return": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens",
          "vToken": "Asset being redeemed"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which borrowed the asset",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay",
          "vToken": "The market to verify the repay against"
        },
        "return": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "payer": "The address repaying the borrow",
          "vToken": "Asset being repaid"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "setMintedVAIOf(address,uint256)": {
        "params": {
          "amount": "The amount of VAI to set to the account",
          "owner": "The address of the account to set"
        },
        "return": "The number of minted VAI by `owner`"
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of vTokens to transfer",
          "vToken": "The market to verify the transfer against"
        },
        "return": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of vTokens to transfer",
          "vToken": "Asset being transferred"
        }
      }
    },
    "title": "Venus's Comptroller Contract"
  },
  "userdoc": {
    "methods": {
      "_grantXVS(address,uint256)": {
        "notice": "Transfer XVS to the recipient"
      },
      "_setAccessControl(address)": {
        "notice": "Sets the address of the access control of this contract"
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "notice": "Pause/unpause certain actions"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given vToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given vToken markets. Supply that brings total Supply to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setProtocolPaused(bool)": {
        "notice": "Set whole protocol pause/unpause state"
      },
      "_setVAIController(address)": {
        "notice": "Sets a new VAI controller"
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "notice": "Set the VAI Vault infos"
      },
      "_setVenusSpeed(address,uint256)": {
        "notice": "Set XVS speed for a single market"
      },
      "_setVenusVAIVaultRate(uint256)": {
        "notice": "Set the amount of XVS distributed per block to VAI Vault"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "actionPaused(address,uint8)": {
        "notice": "Checks if a certain action is paused on a market"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimVenus(address)": {
        "notice": "Claim all the xvs accrued by holder in all markets and VAI"
      },
      "claimVenus(address,address[])": {
        "notice": "Claim all the xvs accrued by holder in the specified markets"
      },
      "claimVenus(address[],address[],bool,bool)": {
        "notice": "Claim all xvs accrued by the holders"
      },
      "claimVenus(address[],address[],bool,bool,bool)": {
        "notice": "Claim all xvs accrued by the holders"
      },
      "claimVenusAsCollateral(address)": {
        "notice": "Claim all the xvs accrued by holder in all markets, a shorthand for `claimVenus` with collateral set to `true`"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "getXVSAddress()": {
        "notice": "Return the address of the XVS token"
      },
      "getXVSVTokenAddress()": {
        "notice": "Return the address of the XVS vToken"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidateVAICalculateSeizeTokens(address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "releaseToVault()": {
        "notice": "Transfer XVS to VAI Vault"
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "setMintedVAIOf(address,uint256)": {
        "notice": "Set the minted VAI amount of the `owner`"
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24529,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24531,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24533,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 24535,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 24540,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)34392"
      },
      {
        "astId": 24542,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 24544,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 24546,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 24551,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(VToken)48061)dyn_storage)"
      },
      {
        "astId": 24566,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Market)24562_storage)"
      },
      {
        "astId": 24568,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 24570,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24572,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24574,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24576,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24580,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24584,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24592,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(VToken)48061)dyn_storage"
      },
      {
        "astId": 24594,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 24598,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24602,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)24589_storage)"
      },
      {
        "astId": 24606,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)24589_storage)"
      },
      {
        "astId": 24612,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 24618,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 24622,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24624,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "vaiController",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(VAIControllerInterface)38847"
      },
      {
        "astId": 24628,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintedVAIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24630,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "vaiMintRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 24632,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintVAIGuardianPaused",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 24634,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "repayVAIGuardianPaused",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 24636,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "protocolPaused",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 24638,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusVAIRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 24643,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusVAIVaultRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 24645,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "vaiVaultAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 24647,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "releaseStartBlock",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 24649,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "minReleaseAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 24654,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 24658,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24663,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "treasuryGuardian",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 24665,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 24667,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 24674,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "venusContributorSpeeds",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24678,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24683,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidatorContract",
        "offset": 0,
        "slot": "37",
        "type": "t_address"
      },
      {
        "astId": 24688,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerLens",
        "offset": 0,
        "slot": "38",
        "type": "t_contract(ComptrollerLensInterface)24521"
      },
      {
        "astId": 24695,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24700,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accessControl",
        "offset": 0,
        "slot": "40",
        "type": "t_address"
      },
      {
        "astId": 24716,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_actionPaused",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(VToken)48061)dyn_storage": {
        "base": "t_contract(VToken)48061",
        "encoding": "dynamic_array",
        "label": "contract VToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerLensInterface)24521": {
        "encoding": "inplace",
        "label": "contract ComptrollerLensInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)34392": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(VAIControllerInterface)38847": {
        "encoding": "inplace",
        "label": "contract VAIControllerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VToken)48061": {
        "encoding": "inplace",
        "label": "contract VToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(VToken)48061)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract VToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(VToken)48061)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(Market)24562_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)24562_storage"
      },
      "t_mapping(t_address,t_struct(VenusMarketState)24589_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.VenusMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(VenusMarketState)24589_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Market)24562_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.Market",
        "members": [
          {
            "astId": 24553,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24555,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24559,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 24561,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isVenus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VenusMarketState)24589_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.VenusMarketState",
        "members": [
          {
            "astId": 24586,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 24588,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}